%% preface
Jeong2022_data_preface;

%% mouse settings
mouse_ids = mouse_ids(~ismember(mouse_ids,'HJ_FP_M8'));
n_mice = numel(mouse_ids);

%% experiment settings
experiment_id = 'pavlovian';
subexperiment_ids = {...
    'acquisition',...
    'extension',...
    'background',...
    };
n_subexperiments = numel(subexperiment_ids);
trace_dur = 1;
cs_dur_set = [2,8,8];
csus_delay_set = cs_dur_set + trace_dur;

%% background reward settings
bg_min_delay = 6;

%% analysis parameters
trial_period = [0,max(csus_delay_set)] + [-2,3] * bg_min_delay;
reward_period = [-2,2];
baseline_period = [-1,0];
roi_period = [0,2];

%% data parsing

% iterate through mice
for mm = 1 : n_mice
    
    % parse mouse directory
    mouse_path = fullfile(data_path,mouse_ids{mm},experiment_id);
    
    % initialize mouse counters
    mouse_session_idx = 1;
    mouse_trial_counter = 0;
    
    % iterate through sub-experiments
    for ee = 1 : n_subexperiments
        subexperiment_id = subexperiment_ids{ee};
        mouse_dir = dir([mouse_path,filesep,'*',subexperiment_id]);
        mouse_dir = mouse_dir(cellfun(@(x)~contains(x,'.'),{mouse_dir.name}));

        % parse session directory
        session_ids = {mouse_dir.name};
        session_days = cellfun(@(x)str2double(strrep(x,'Day','')),session_ids);
        
        % sort sessions chronologically
        days = cellfun(@(x) sscanf(x,'Day%i'),session_ids);
        [~,chrono_idcs] = sort(days);
        session_ids = session_ids(chrono_idcs);
        n_sessions = numel(session_ids);
                
        % initialize mouse counters
        experiment_trial_counter = 0;
        
        % iterate through sessions
        for ss = 1 : n_sessions
            progressreport(ss,n_sessions,sprintf(...
                'parsing behavioral & photometry data (mouse %i/%i)',mm,n_mice));
            session_path = fullfile(mouse_path,session_ids{ss});
            
            %% load behavioral data
            bhv_id = sprintf('%s_%s_eventlog.mat',...
                mouse_ids{mm},strrep(session_ids{ss},['_',subexperiment_id],''));
            bhv_path = fullfile(session_path,bhv_id);
            load(bhv_path)
            
            %% parse events
            event_labels = categorical(...
                eventlog(:,1),[15,16,5,10,14,0],...
                {'CS1','CS2','lick','US','trial_end','session_end'});
            event_times = eventlog(:,2);
            nosolenoid_flags = eventlog(:,3);
            event_idcs = (1 : numel(event_labels))';
            start_idx = find(ismember(event_labels,{'CS1','CS2'}),1);
            end_idx = min(...
                find(event_labels == 'trial_end',1,'last') + 1,...
                find(event_labels == 'session_end'));
            if isempty(end_idx)
                end_idx = numel(event_labels);
            end
            session_dur = event_times(end_idx) - event_times(start_idx);
            
            %% event selection
            valid_flags = ...
                ~isundefined(event_labels) & ...
                ~nosolenoid_flags & ...
                event_idcs >= start_idx & ...
                event_idcs < end_idx;
            n_events = sum(valid_flags);
            event_idcs = (1 : n_events)';
            event_labels = removecats(event_labels(valid_flags),'end');
            event_times = event_times(valid_flags);
            
            %% parse CS
            cs_flags = ismember(event_labels,{'CS1','CS2'});
            cs_events = find(cs_flags);
            cs_labels = event_labels(cs_flags);
            cs_times = event_times(cs_flags);
            n_trials = sum(cs_flags);
            trial_idcs = (1 : n_trials)';
            
            %% parse US
            us_flags = event_labels == 'US';
            us_events = find(us_flags);
            
            % preallocation
            us_times = nan(n_trials,1);
            
            % iterate through trials
            for ii = 1 : n_trials
                trial_start_idx = cs_events(ii);
                if ii < n_trials
                    trial_end_idx = cs_events(ii+1);
                else
                    trial_end_idx = n_events;
                end
                us_idx = find(us_flags & ...
                    event_idcs >= trial_start_idx & ...
                    event_idcs < trial_end_idx,1,'last');
                if ~isempty(us_idx)
                    us_times(ii) = event_times(us_idx);
                end
            end
            
            %% parse first licks after reward delivery
            lick_flags = event_labels == 'lick';
            
            % preallocation
            reward_times = nan(n_trials,1);
            
            % iterate through trials
            for ii = 1 : n_trials
                trial_idx = find(lick_flags & ...
                    event_times >= us_times(ii),1,'first');
                if ~isempty(trial_idx)
                    reward_times(ii) = event_times(trial_idx);
                end
            end
            
            %% compute inter-reward-intervals (IRI, nominal & actual)
            iri_nominal = nan(n_trials,1);
            iri_actual = nan(n_trials,1);
            iri_nominal(~isnan(us_times)) = ...
                diff([0;us_times((~isnan(us_times)))]);
            iri_actual(~isnan(reward_times)) = ...
                diff([0;reward_times((~isnan(reward_times)))]);
            
            %% parse reaction time
            reaction_times = reward_times - us_times;
            
            %% load photometry data
            photometry_path = fullfile(session_path,'Photometry.mat');
            load(photometry_path);
            
            % renormalization
            if want2renormalize
                f0 = abs(quantile(dff,.1));
                dff = (dff - f0) ./ f0;
            end
            
            %% parse licks
            lick_times = event_times(lick_flags);
            lick_edges = event_times(1) : dt : event_times(end);
            lick_counts = histcounts(lick_times,lick_edges);
            
            % get lick-aligned snippets of lick counts
            [lick_baseline_snippets,~] = signal2eventsnippets(...
                lick_edges(1:end-1),lick_counts,cs_times,baseline_period,dt);
            [lick_cs_snippets,~] = signal2eventsnippets(...
                lick_edges(1:end-1),lick_counts,cs_times,roi_period,dt);
            [lick_anticipatory_snippets,lick_anticipatory_time] = signal2eventsnippets(...
                lick_edges(1:end-1),lick_counts,cs_times,...
                [0,csus_delay_set(ee)],dt);
            [lick_trial_snippets,lick_trial_time] = signal2eventsnippets(...
                lick_edges(1:end-1),lick_counts,cs_times,...
                trial_period + lickrate_kernel.paddx,dt);
            [lick_reward_snippets,lick_reward_time] = signal2eventsnippets(...
                lick_edges(1:end-1),lick_counts,reward_times,...
                reward_period + lickrate_kernel.paddx,dt);
            
            % preallocation
            lick_rate = nan(n_trials,1);
            lick_onset_time = nan(n_trials,1);
            
            % iterate through trials
            for ii = 1 : n_trials
                
                % compute 'lick rate' metric
                lick_rate(ii) = ...
                    sum(lick_cs_snippets(ii,:) * dt) / range(roi_period) - ...
                    sum(lick_baseline_snippets(ii,:) * dt) / range(baseline_period);
                
                % compute 'median lick onset time' metric
                lick_cdf = cumsum(lick_anticipatory_snippets(ii,:));
                lick_onset_idx = find(lick_cdf >= .5,1);
                if ~isempty(lick_onset_idx)
                    lick_onset_time(ii) = ...
                        lick_anticipatory_time(lick_onset_idx);
                end
            end
            
            %% compute inter-lick-intervals (ILI)
            ili_events = diff([nan;lick_times]);
            ili_idcs = sum(lick_times > cs_times',2);
            ili_trials = arrayfun(@(x)ili_events(ili_idcs == x),trial_idcs,...
                'uniformoutput',false);
            
            %% parse photometry data
            
            % correct for nonstationary sampling frequency
            time = T(1) : dt : T(end);
            da = interp1(T,dff,time);
            
            % get event-aligned snippets of DA
            [da_cs_baseline_snippets,~] = signal2eventsnippets(...
                time,da,cs_times,baseline_period,dt);
            [da_cs_roi_snippets,~] = signal2eventsnippets(...
                time,da,cs_times,roi_period,dt);
            [da_us_baseline_snippets,~] = signal2eventsnippets(...
                time,da,cs_times+csus_delay_set(1),baseline_period,dt);
            [da_us_roi_snippets,~] = signal2eventsnippets(...
                time,da,cs_times+csus_delay_set(1),roi_period,dt);
            [da_trial_snippets,da_trial_time] = signal2eventsnippets(...
                time,da,cs_times,trial_period,dt);
            [da_reward_snippets,da_reward_time] = signal2eventsnippets(...
                time,da,reward_times,reward_period,dt);
            
            % preallocation
            da_cs_response = nan(n_trials,1);
            da_initial_us_response = nan(n_trials,1);
            
            % iterate through trials
            for ii = 1 : n_trials
                
                % compute 'DA response' metric
                da_cs_response(ii) = ...
                    sum(da_cs_roi_snippets(ii,:) * dt) / range(roi_period) - ...
                    sum(da_cs_baseline_snippets(ii,:) * dt) / range(baseline_period);
                da_initial_us_response(ii) = ...
                    sum(da_us_roi_snippets(ii,:) * dt) / range(roi_period) - ...
                    sum(da_cs_baseline_snippets(ii,:) * dt) / range(baseline_period);
            end
            
            %% parse background rewards
%             bg_flags = event_labels == 'bg_rwd';
%             bg_times = event_times(bg_flags);
%             
%             % get event-aligned snippets of DA
%             [da_bg_snippets,da_bg_time] = signal2eventsnippets(...
%                 time,da,bg_times,[baseline_period(1),roi_period(2)],dt);
%             
%             % nanify (maybe this should be moved inside??? the snippet fun???)
%             inter_bg_intervals = diff([0;bg_times]);
%             time_mat = ...
%                 da_bg_time > -[inf;inter_bg_intervals(1:end-1)] & ...
%                 da_bg_time < inter_bg_intervals;
%             da_bg_snippets(~time_mat) = nan;
%             
%             % assign background rewards to each trial
%             bg_idcs = sum(bg_times > cs_times',2);
%             da_bg_snippets_trials = arrayfun(...
%                 @(x)da_bg_snippets(bg_idcs == x,:),trial_idcs,...
%                 'uniformoutput',false);
            
            %% organize session data into tables
            
            % construct trial table
            index_table = table(...
                trial_idcs + mouse_trial_counter,...
                trial_idcs + experiment_trial_counter,...
                trial_idcs,...
                'variablenames',{...
                'mouse',...
                'experiment',...
                'session',...
                });
            
            % construct time table
            time_table = table(...
                cs_times,...
                cs_times+cs_dur_set(ee),...
                us_times,...
                reward_times,...
                'variablenames',{...
                'cs_onset',...
                'cs_offset',...
                'us',...
                'reward',...
                });
            
            % construct CS table
            cs_table = table(...
                cs_labels,...
                2 * (cs_labels == unique(cs_labels(~isnan(us_times)))) - 1,...
                repmat(cs_dur_set(ee),n_trials,1),...
                'variablenames',{...
                'label',...
                'sign',...
                'dur',...
                });
            
            % construct trial table
            trial_table = table(...
                index_table,...
                time_table,...
                cs_table,...
                'variablenames',{...
                'index',...
                'time',...
                'cs',...
                });
            
            % construct IRI table
            iri_table = table(...
                iri_nominal,...
                iri_actual,...
                'variablenames',{...
                'nominal',...
                'actual',...
                });
            
            % construct lick table
            lick_table = table(...
                lick_trial_snippets,...
                lick_reward_snippets,...
                lick_rate,...
                lick_onset_time,...
                'variablenames',{...
                'trial',...
                'reward',...
                'rate',...
                'onset'});
            
            % construct DA table
            da_table = table(...
                da_trial_snippets,...
                da_reward_snippets,...
                da_cs_response,...
                da_initial_us_response,...
                'variablenames',{...
                'trial',...
                'reward',...
                'cs_response',...
                'initial_us_response'});
            
            % concatenate into a session table
            session_data = table(...
                categorical(cellstr(repmat(mouse_ids{mm},n_trials,1)),mouse_ids),...
                categorical(cellstr(repmat(subexperiment_id,n_trials,1)),subexperiment_ids),...
                repmat(mouse_session_idx,n_trials,1),...
                trial_table,...
                iri_table,...
                reaction_times,...
                lick_table,...
                ili_trials,...
                da_table,...
                'variablenames',{...
                'mouse',...
                'experiment',...
                'session',...
                'trial'...
                'iri',...
                'rt',...
                'lick',...
                'ili',...
                'da',...
                });
            
            % append to the current mouse's table
            if mouse_session_idx == 1
                mouse_data = session_data;
            else
                mouse_data = [mouse_data; session_data];
            end
            
            % increment mouse counters
            mouse_session_idx = mouse_session_idx + 1;
            mouse_trial_counter = mouse_trial_counter + n_trials;
            experiment_trial_counter = experiment_trial_counter + n_trials;
        end
    end
    
    % append to the final data table
    if mm == 1
        data = mouse_data;
    else
        data = [data; mouse_data];
    end
end

%% reaction time bin settings
rt_binwidth = 1 / 15;
rt_roi = [trial_period(1),trial_period(2)];
rt_edges = rt_roi(1) : rt_binwidth : rt_roi(2);

%% flag rewarded trials
reward_flags = ~isnan(data.trial.time.reward);

%% flag acquisition trials
acquisition_flags = data.experiment == 'acquisition';
extension_flags = data.experiment == 'extension';

%% CS onset-aligned DA & lick rasters (sorted chronologically)

% iterate through mice
for mm = 1 : n_mice
    
    % figure initialization
    figure(...
        'windowstyle','docked',...
        'numbertitle','off',...
        'name',sprintf('%s_trial_chronological',...
        strrep(mouse_ids{mm},'_','')),...
        'color','w');
    
    % axes initialization
    n_rows = 1;
    n_cols = 2;
    n_sps = n_rows * n_cols;
    sps = gobjects(n_sps,1);
    for ii = 1 : n_sps
        sps(ii) = subplot(n_rows,n_cols,ii);
        xlabel(sps(ii),'Time since CS onset (s)');
        ylabel(sps(ii),'Trial # (sorted chronologically within CS)');
    end
    set(sps,...
        'xlim',trial_period,...
        'ylimspec','tight',...
        'xscale','linear',...
        'nextplot','add',...
        'colormap',bone(2^8-1),...
        'linewidth',2,...
        'fontsize',12,...
        'layer','top',...
        'tickdir','out');
    
    % figure pseudo title
    annotation(...
        'textbox',[0,.95,1,.05],...
        'string',sprintf('%s',mouse_ids{mm}),...
        'fontsize',14,...
        'fontweight','bold',...
        'horizontalalignment','center',...
        'verticalalignment','bottom',...
        'linestyle','none',...
        'interpreter','none');
    
    % axes titles
    title(sps(1),'DA (\DeltaF/F)');
    title(sps(2),'Lick rate');
    
    % trial selection
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % parse DA data
    da_mat = data.da.trial(trial_flags,:);
    
    % parse lick data
    lick_counts = data.lick.trial(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_mat = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_mat(nan_flags) = nan;
    
    % parse behavioral data
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
        
    % trial sorting
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    
    % plot DA raster
    imagesc(sps(1),trial_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    imagesc(sps(2),trial_period,[],...
        lick_mat(sorted_idcs,:),[0,8.5]);
    
    % iterate through rasters
    for ii = 1 : n_sps
            
        % plot reaction times
        scatter(sps(ii),...
            csus_delays(sorted_idcs)+reaction_times(sorted_idcs),1:n_trials,5,...
            session_clrs(session_idcs(sorted_idcs),:),...
            'marker','.');
        
        % iterate through CS types
        type_counter = 0;
        dur_counter = 0;
        cs_types = unique(data.trial.cs.label(mouse_flags));
        n_cs_types = numel(cs_types);
        for cc = 1 : n_cs_types
            cs_type_flags = data.trial.cs.label == cs_types(cc);
            
            % iterate through sessions
            for ss = 1 : n_sessions
                session_flags = data.session == ss;
                trial_flags = ...
                    mouse_flags & ...
                    session_flags & ...
                    cs_type_flags;
                type_prev_counter = type_counter;
                type_counter = type_counter + sum(trial_flags);
                
                % plot session delimeters
                plot(sps(ii),xlim(sps(ii)),...
                    [1,1]*(type_counter+.5),...
                    'color',[1,1,1],...
                    'linestyle',':');
                plot(sps(ii),[1,1]*min(xlim(sps(ii)))+.01*range(xlim(sps(ii))),...
                    [type_prev_counter,type_counter]+.5,...
                    'color',session_clrs(ss,:),...
                    'linewidth',5);
            end
            
            % iterate through sub-experiments
            for ee = 1 : n_subexperiments
                experiment_flags = data.experiment == subexperiment_ids{ee};
                trial_flags = ...
                    mouse_flags & ...
                    cs_type_flags & ...
                    experiment_flags;
                dur_prev_counter = dur_counter;
                dur_counter = dur_counter + sum(trial_flags);
                
                % plot reference lines
                plot(sps(ii),...
                    [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
                    [dur_prev_counter,dur_counter]+.5,'--w');
                plot(sps(ii),...
                    [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
                    [dur_prev_counter,dur_counter]+.5,'--w');
                plot(sps(ii),xlim(sps(ii)),...
                    [1,1]*(dur_counter+.5),...
                    'color',[1,1,1]);
            end
        end
        
        % plot reference lines
        plot(sps(ii),xlim(sps(ii)),...
            [1,1]*(sum(data.trial.cs.label(mouse_flags)=='CS1')+.5),...
            'color',[1,1,1],...
            'linewidth',1.5);
        plot(sps(ii),[0,0],ylim(sps(ii)),'--w');
    end
    
    % save figure
    if want2save
        png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
        print(gcf,png_file,'-dpng','-r300','-painters');
    end
end

%% CS+ onset-aligned DA & lick rasters (sorted by reaction time)

% iterate through mice
for mm = 1 : n_mice
    
    % figure initialization
    figure(...
        'windowstyle','docked',...
        'numbertitle','off',...
        'name',sprintf('%s_trial_reaction',...
        strrep(mouse_ids{mm},'_','')),...
        'color','w');
    
    % axes initialization
    n_rows = 1;
    n_cols = 2;
    n_sps = n_rows * n_cols;
    sps = gobjects(n_sps,1);
    for ii = 1 : n_sps
        sps(ii) = subplot(n_rows,n_cols,ii);
        xlabel(sps(ii),'Time since CS+ onset (s)');
        ylabel(sps(ii),'Trial # (sorted by reaction time)');
    end
    set(sps,...
        'xlim',trial_period,...
        'ylimspec','tight',...
        'xscale','linear',...
        'nextplot','add',...
        'colormap',bone(2^8-1),...
        'linewidth',2,...
        'fontsize',12,...
        'layer','top',...
        'tickdir','out');
    
    % figure pseudo title
    annotation(...
        'textbox',[0,.95,1,.05],...
        'string',sprintf('%s',mouse_ids{mm}),...
        'fontsize',14,...
        'fontweight','bold',...
        'horizontalalignment','center',...
        'verticalalignment','bottom',...
        'linestyle','none',...
        'interpreter','none');
    
    % axes titles
    title(sps(1),'DA (\DeltaF/F)');
    title(sps(2),'Lick rate');
    
    % trial selection
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % parse DA data
    da_mat = data.da.trial(trial_flags,:);
    
    % parse lick data
    lick_counts = data.lick.trial(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_mat = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_mat(nan_flags) = nan;
    
    % parse behavioral data
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
        
    % trial sorting
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2,3]);
    
    % plot DA raster
    imagesc(sps(1),trial_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    imagesc(sps(2),trial_period,[],...
        lick_mat(sorted_idcs,:),[0,8.5]);
    
    % iterate through rasters
    for ii = 1 : n_sps
            
        % plot reaction times
        scatter(sps(ii),...
            csus_delays(sorted_idcs)+reaction_times(sorted_idcs),1:n_trials,5,...
            session_clrs(session_idcs(sorted_idcs),:),...
            'marker','.');
        
        % iterate through sessions
        counter = 0;
        for ss = 1 : n_sessions
            session_flags = data.session == ss;
            trial_flags = ...
                mouse_flags & ...
                session_flags & ...
                reward_flags;
            prev_counter = counter;
            counter = counter + sum(trial_flags);
            
            % plot session delimeters
            plot(sps(ii),xlim(sps(ii)),...
                [1,1]*(counter+.5),...
                'color',[1,1,1]);
            plot(sps(ii),[1,1]*min(xlim(sps(ii)))+.01*range(xlim(sps(ii))),...
                [prev_counter,counter]+.5,...
                'color',session_clrs(ss,:),...
                'linewidth',5);
        end
        
        % iterate through sub-experiments
        counter = 0;
        for ee = 1 : n_subexperiments
            cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
            trial_flags = ...
                mouse_flags & ...
                cs_dur_flags & ...
                reward_flags;
            prev_counter = counter;
            counter = counter + sum(trial_flags);
            
            % plot reference lines
            plot(sps(ii),...
                [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
                [prev_counter,counter]+.5,'--w');
            plot(sps(ii),...
                [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
                [prev_counter,counter]+.5,'--w');
        end
        
        % plot reference lines
        plot(sps(ii),[0,0],ylim(sps(ii)),'--w');
    end
    
    % save figure
    if want2save
        png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
        print(gcf,png_file,'-dpng','-r300','-painters');
    end
end

%% reward-aligned DA & lick rasters (sorted chronologically)

% iterate through mice
for mm = 1 : n_mice
    
    % figure initialization
    figure(...
        'windowstyle','docked',...
        'numbertitle','off',...
        'name',sprintf('%s_reward_chronological',...
        strrep(mouse_ids{mm},'_','')),...
        'color','w');
    
    % axes initialization
    n_rows = 1;
    n_cols = 2;
    n_sps = n_rows * n_cols;
    sps = gobjects(n_sps,1);
    for ii = 1 : n_sps
        sps(ii) = subplot(n_rows,n_cols,ii);
        xlabel(sps(ii),'Time since reward collection (s)');
        ylabel(sps(ii),'Trial # (sorted chronologically)');
    end
    set(sps,...
        'xlim',reward_period,...
        'ylimspec','tight',...
        'xscale','linear',...
        'nextplot','add',...
        'colormap',bone(2^8-1),...
        'linewidth',2,...
        'fontsize',12,...
        'layer','top',...
        'tickdir','out');
    
    % figure pseudo title
    annotation(...
        'textbox',[0,.95,1,.05],...
        'string',sprintf('%s',mouse_ids{mm}),...
        'fontsize',14,...
        'fontweight','bold',...
        'horizontalalignment','center',...
        'verticalalignment','bottom',...
        'linestyle','none',...
        'interpreter','none');
    
    % axes titles
    title(sps(1),'DA (\DeltaF/F)');
    title(sps(2),'Lick rate');
    
    % trial selection
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % parse DA data
    da_mat = data.da.reward(trial_flags,:);
    
    % parse lick data
    lick_counts = data.lick.reward(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_mat = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_mat(nan_flags) = nan;
    
    % parse behavioral data
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
        
    % trial sorting
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    
    % plot DA raster
    imagesc(sps(1),reward_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    imagesc(sps(2),reward_period,[],...
        lick_mat(sorted_idcs,:),[0,8.5]);
    
    % iterate through rasters
    for ii = 1 : n_sps
            
        % plot reaction times
        scatter(sps(ii),...
            -reaction_times(sorted_idcs),1:n_trials,5,...
            session_clrs(session_idcs(sorted_idcs),:),...
            'marker','.');
        
        % iterate through sessions
        counter = 0;
        for ss = 1 : n_sessions
            session_flags = data.session == ss;
            trial_flags = ...
                mouse_flags & ...
                session_flags & ...
                reward_flags;
            prev_counter = counter;
            counter = counter + sum(trial_flags);
            
            % plot session delimeters
            plot(sps(ii),xlim(sps(ii)),...
                [1,1]*(counter+.5),...
                'color',[1,1,1]);
            plot(sps(ii),[1,1]*min(xlim(sps(ii)))+.01*range(xlim(sps(ii))),...
                [prev_counter,counter]+.5,...
                'color',session_clrs(ss,:),...
                'linewidth',5);
        end
        
        % iterate through sub-experiments
        counter = 0;
        for ee = 1 : n_subexperiments
            cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
            trial_flags = ...
                mouse_flags & ...
                cs_dur_flags & ...
                reward_flags;
            prev_counter = counter;
            counter = counter + sum(trial_flags);
            
            % plot reference lines
            plot(sps(ii),...
                [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
                [prev_counter,counter]+.5,'--w');
            plot(sps(ii),...
                [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
                [prev_counter,counter]+.5,'--w');
        end
        
        % plot reference lines
        plot(sps(ii),[0,0],ylim(sps(ii)),'--w');
    end
    
    % save figure
    if want2save
        png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
        print(gcf,png_file,'-dpng','-r300','-painters');
    end
end

%% reward-aligned DA & lick rasters (sorted by reaction time)

% iterate through mice
for mm = 1 : n_mice
    
    % figure initialization
    figure(...
        'windowstyle','docked',...
        'numbertitle','off',...
        'name',sprintf('%s_reward_reaction',...
        strrep(mouse_ids{mm},'_','')),...
        'color','w');
    
    % axes initialization
    n_rows = 1;
    n_cols = 2;
    n_sps = n_rows * n_cols;
    sps = gobjects(n_sps,1);
    for ii = 1 : n_sps
        sps(ii) = subplot(n_rows,n_cols,ii);
        xlabel(sps(ii),'Time since reward collection (s)');
        ylabel(sps(ii),'Trial # (sorted by reaction time)');
    end
    set(sps,...
        'xlim',reward_period,...
        'ylimspec','tight',...
        'xscale','linear',...
        'nextplot','add',...
        'colormap',bone(2^8-1),...
        'linewidth',2,...
        'fontsize',12,...
        'layer','top',...
        'tickdir','out');
    
    % figure pseudo title
    annotation(...
        'textbox',[0,.95,1,.05],...
        'string',sprintf('%s',mouse_ids{mm}),...
        'fontsize',14,...
        'fontweight','bold',...
        'horizontalalignment','center',...
        'verticalalignment','bottom',...
        'linestyle','none',...
        'interpreter','none');
    
    % axes titles
    title(sps(1),'DA (\DeltaF/F)');
    title(sps(2),'Lick rate');
    
    % trial selection
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % parse DA data
    da_mat = data.da.reward(trial_flags,:);
    
    % parse lick data
    lick_counts = data.lick.reward(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_mat = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_mat(nan_flags) = nan;
    
    % parse behavioral data
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
        
    % trial sorting
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2,3]);
    
    % plot DA raster
    imagesc(sps(1),reward_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    imagesc(sps(2),reward_period,[],...
        lick_mat(sorted_idcs,:),[0,8.5]);
    
    % iterate through rasters
    for ii = 1 : n_sps
            
        % plot reaction times
        scatter(sps(ii),...
            -reaction_times(sorted_idcs),1:n_trials,5,...
            session_clrs(session_idcs(sorted_idcs),:),...
            'marker','.');
        
        % iterate through sessions
        counter = 0;
        for ss = 1 : n_sessions
            session_flags = data.session == ss;
            trial_flags = ...
                mouse_flags & ...
                session_flags & ...
                reward_flags;
            prev_counter = counter;
            counter = counter + sum(trial_flags);
            
            % plot session delimeters
            plot(sps(ii),xlim(sps(ii)),...
                [1,1]*(counter+.5),...
                'color',[1,1,1]);
            plot(sps(ii),[1,1]*min(xlim(sps(ii)))+.01*range(xlim(sps(ii))),...
                [prev_counter,counter]+.5,...
                'color',session_clrs(ss,:),...
                'linewidth',5);
        end
        
        % iterate through sub-experiments
        counter = 0;
        for ee = 1 : n_subexperiments
            cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
            trial_flags = ...
                mouse_flags & ...
                cs_dur_flags & ...
                reward_flags;
            prev_counter = counter;
            counter = counter + sum(trial_flags);
            
            % plot reference lines
            plot(sps(ii),...
                [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
                [prev_counter,counter]+.5,'--w');
            plot(sps(ii),...
                [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
                [prev_counter,counter]+.5,'--w');
        end
        
        % plot reference lines
        plot(sps(ii),[0,0],ylim(sps(ii)),'--w');
    end
    
    % save figure
    if want2save
        png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
        print(gcf,png_file,'-dpng','-r300','-painters');
    end
end

%% reward delivery-aligned DA rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'Trial # (sorted chronologically w/in CS)');
    
    % plot DA raster
    da_mat = data.da.trial(trial_flags,:);
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    imagesc(sps(mm),trial_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        csus_delays(sorted_idcs)+reaction_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through CS types
    type_counter = 0;
    dur_counter = 0;
    cs_types = unique(data.trial.cs.label(mouse_flags));
    n_cs_types = numel(cs_types);
    for cc = 1 : n_cs_types
        cs_type_flags = data.trial.cs.label == cs_types(cc);
        
        % iterate through sessions
        for ss = 1 : n_sessions
            session_flags = data.session == ss;
            trial_flags = ...
                mouse_flags & ...
                session_flags & ...
                cs_type_flags;
            type_prev_counter = type_counter;
            type_counter = type_counter + sum(trial_flags);
            
            % plot session delimeters
            plot(sps(mm),xlim(sps(mm)),...
                [1,1]*(type_counter+.5),...
                'color',[1,1,1]);
            plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
                [type_prev_counter,type_counter]+.5,...
                'color',session_clrs(ss,:),...
                'linewidth',5);
        end
        
        % iterate through sub-experiments
        for ee = 1 : n_subexperiments
            cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
            trial_flags = ...
                mouse_flags & ...
                cs_type_flags & ...
                cs_dur_flags;
            dur_prev_counter = dur_counter;
            dur_counter = dur_counter + sum(trial_flags);
            
            % plot reference lines
            plot(sps(mm),...
                [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
                [dur_prev_counter,dur_counter]+.5,'--w');
            plot(sps(mm),...
                [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
                [dur_prev_counter,dur_counter]+.5,'--w');
        end
    end
    
    % plot reference lines
    plot(sps(mm),xlim(sps(mm)),...
        [1,1]*(sum(data.trial.cs.label(mouse_flags)=='CS1')+.5),...
        'color',[1,1,1],...
        'linewidth',1.5);
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% reward delivery-aligned DA rasters (sorted by reaction time)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS+ onset (s)');
    ylabel(sps(mm),'Trial # (sorted by reaction time)');
    
    % plot DA raster
    da_mat = data.da.trial(trial_flags,:);
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2,3]);
    imagesc(sps(mm),trial_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        csus_delays(sorted_idcs)+reaction_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        prev_counter = counter;
        counter = counter + sum(trial_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % iterate through sub-experiments
    counter = 0;
    for ee = 1 : n_subexperiments
        cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
        trial_flags = ...
            mouse_flags & ...
            cs_dur_flags & ...
            reward_flags;
        prev_counter = counter;
        counter = counter + sum(trial_flags);
        
        % plot reference lines
        plot(sps(mm),...
            [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
            [prev_counter,counter]+.5,'--w');
        plot(sps(mm),...
            [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
            [prev_counter,counter]+.5,'--w');
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% reward collection-aligned DA rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',reward_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Reward # (sorted chronologically)');
    
    % plot DA raster
    da_mat = data.da.reward(trial_flags,:);
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    imagesc(sps(mm),...
        reward_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = -data.rt(trial_flags);
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        reaction_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        prev_counter = counter;
        counter = counter + sum(trial_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% reward collection-aligned DA rasters (sorted by reaction time)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',reward_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Reward # (sorted by reaction time)');
    
    % plot DA raster
    da_mat = data.da.reward(trial_flags,:);
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2,3]);
    imagesc(sps(mm),...
        reward_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = -data.rt(trial_flags);
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        reaction_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        prev_counter = counter;
        counter = counter + sum(trial_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% reward delivery-aligned lick rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','lick_delivery_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'Trial # (sorted chronologically w/in CS)');
    
    % plot lick raster
    lick_counts = data.lick.trial(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_mat = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_mat(nan_flags) = nan;
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    imagesc(sps(mm),lick_trial_time,[],...
        lick_mat(sorted_idcs,:),[0,7.5]);
    
    % plot lick onset times
    lick_onset_times = data.lick.onset(trial_flags);
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        lick_onset_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % plot reaction times
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        csus_delays(sorted_idcs)+reaction_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through CS types
    type_counter = 0;
    dur_counter = 0;
    cs_types = unique(data.trial.cs.label(mouse_flags));
    n_cs_types = numel(cs_types);
    for cc = 1 : n_cs_types
        cs_type_flags = data.trial.cs.label == cs_types(cc);
        
        % iterate through sessions
        for ss = 1 : n_sessions
            session_flags = data.session == ss;
            trial_flags = ...
                mouse_flags & ...
                session_flags & ...
                cs_type_flags;
            type_prev_counter = type_counter;
            type_counter = type_counter + sum(trial_flags);
            
            % plot session delimeters
            plot(sps(mm),xlim(sps(mm)),...
                [1,1]*(type_counter+.5),...
                'color',[1,1,1]);
            plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
                [type_prev_counter,type_counter]+.5,...
                'color',session_clrs(ss,:),...
                'linewidth',5);
        end
        
        % iterate through sub-experiments
        for ee = 1 : n_subexperiments
            cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
            trial_flags = ...
                mouse_flags & ...
                cs_type_flags & ...
                cs_dur_flags;
            dur_prev_counter = dur_counter;
            dur_counter = dur_counter + sum(trial_flags);
            
            % plot reference lines
            plot(sps(mm),...
                [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
                [dur_prev_counter,dur_counter]+.5,'--w');
            plot(sps(mm),...
                [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
                [dur_prev_counter,dur_counter]+.5,'--w');
        end
    end
    
    % plot reference lines
    plot(sps(mm),xlim(sps(mm)),...
        [1,1]*(sum(data.trial.cs.label(mouse_flags)=='CS1')+.5),...
        'color',[1,1,1],...
        'linewidth',1.5);
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% reward delivery-aligned lick rasters (sorted by reaction time)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','lick_delivery_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_trials = sum(trial_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS+ onset (s)');
    ylabel(sps(mm),'Trial # (sorted by reaction time)');
    
    % plot lick raster
    lick_counts = data.lick.trial(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_mat = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_mat(nan_flags) = nan;
    sorting_mat = [...
        double(data.trial.cs.label(trial_flags)),...
        data.session(trial_flags),...
        data.rt(trial_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2,3]);
    imagesc(sps(mm),lick_trial_time,[],...
        lick_mat(sorted_idcs,:),[0,7.5]);
    
    % plot lick onset times
    lick_onset_times = data.lick.onset(trial_flags);
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        lick_onset_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % plot reaction times
    reaction_times = data.rt(trial_flags);
    csus_delays = data.trial.cs.dur(trial_flags) + trace_dur;
    session_idcs = data.session(trial_flags);
    scatter(sps(mm),...
        csus_delays(sorted_idcs)+reaction_times(sorted_idcs),1:n_trials,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        prev_counter = counter;
        counter = counter + sum(trial_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % iterate through sub-experiments
    counter = 0;
    for ee = 1 : n_subexperiments
        cs_dur_flags = data.trial.cs.dur == cs_dur_set(ee);
        trial_flags = ...
            mouse_flags & ...
            cs_dur_flags & ...
            reward_flags;
        prev_counter = counter;
        counter = counter + sum(trial_flags);
        
        % plot reference lines
        plot(sps(mm),...
            [0,0]+unique(data.trial.cs.dur(trial_flags),'rows'),...
            [prev_counter,counter]+.5,'--w');
        plot(sps(mm),...
            [0,0]+unique(data.trial.cs.dur(trial_flags)+trace_dur,'rows'),...
            [prev_counter,counter]+.5,'--w');
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% CS+ onset-aligned average DA (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_cs+_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',reward_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS+ onset (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        da_mat = data.da.trial(trial_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(trial_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_trial_time(~nan_flags),...
            fliplr(da_trial_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            da_trial_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot response windows used to compute DA responses
    yylim = ylim(sps(mm));
    yymax = max(yylim) * 1.1;
    patch(sps(mm),...
        [baseline_period,fliplr(baseline_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'w',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    patch(sps(mm),...
        [roi_period,fliplr(roi_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[1,1]*baseline_period(2),ylim(sps(mm)),'-k',...
        'linewidth',1);
end

%% initial US-aligned average DA (split by stage within experiment)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_initial_us_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',reward_period+csus_delay_set(1),...
    'xlim',trial_period,...
    'xtick',unique([0,cs_dur_set,csus_delay_set]),...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% training stage settings
n_stages = 15;
stage_clrs = colorlerp([[.85,.05,.25];[0,0,0]],n_stages);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % iterate through sessions
    session_idcs = unique(data.session(mouse_flags & extension_flags));
    session_flags = data.session <= session_idcs(3);
    n_trials = sum(mouse_flags & extension_flags & session_flags);
    
    % compute stage boundaries
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    stage_boundaries(n_stages) = stage_boundaries(2);
    
    % iterate through stages
    for ss = [1,n_stages]
        stage_flags = ...
            data.trial.index.experiment > stage_boundaries(ss) & ...
            data.trial.index.experiment <= stage_boundaries(ss+1);
        trial_flags = ...
            mouse_flags & ...
            extension_flags & ...
            ...session_flags & ...
            stage_flags & ...
            reward_flags;
        trial_idcs = find(trial_flags);
        
        % plot average DA response
        da_mat = data.da.trial(trial_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(size(da_mat,1));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_trial_time(~nan_flags),...
            fliplr(da_trial_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            da_trial_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',stage_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot response windows used to compute DA responses
    yylim = ylim(sps(mm));
    yymax = max(yylim) * 1.1;
    patch(sps(mm),...
        [baseline_period,fliplr(baseline_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'w',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    patch(sps(mm),...
        [roi_period,fliplr(roi_period)]+csus_delay_set(1),...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[1,1]*baseline_period(2)+csus_delay_set(1),ylim(sps(mm)),'-k',...
        'linewidth',1);
end

%% plot CS- response dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','cs-_response',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'DA CS- response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            ~reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.cs_response(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        ~reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.cs_response(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot CS+ response dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','cs+_response',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'DA CS+ response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.cs_response(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.cs_response(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot initial US response dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','initial_us_response',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'DA initial US response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.initial_us_response(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.initial_us_response(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot lick onset time dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','lick_onset_time',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Anticipatory lick onset time (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.lick.onset(trial_flags);
        if sum(~isnan(y)) <= 2
            continue;
        end
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.lick.onset(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot test 3

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','test_3',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Normalized trial');
    ylabel(sps(mm),'Normalized cumulative DA CS+ response');
    
    % trial selection
    trial_flags = ...
        mouse_flags & ...
        reward_flags & ...
        acquisition_flags;
    x = data.trial.index.mouse(trial_flags);
    y_da = data.da.cs_response(trial_flags);
    y_lick = data.lick.rate(trial_flags);
    
    % !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    %     y_da = y_da - min(y_da);
    %     y_lick = y_lick - min(y_lick);
    
    % normalization
    x = x ./ max(x);
    y_da = cumsum(y_da,'omitnan') ./ nansum(y_da);
    y_lick = cumsum(y_lick,'omitnan') ./ nansum(y_lick);
    
    % plot test 3 metrics
    plot(sps(mm),...
        x,y_da,'-k',...
        x,y_lick,'-r',...
        x,y_lick,'--r',...
        'linewidth',1.5);
    
    % pseudo-legend
    text(sps(mm),-.225,.5,'Normalized cumulative lick rate',...
        'horizontalalignment','center',...
        'units','normalized',...
        'fontsize',14,...
        'rotation',90,...
        'color','r');
    
    % plot reference line
    plot(sps(mm),[0,1],[0,1],'--k');
end

%% plot test 4

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','test_4',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',[0,1]+[-1,1]*.05,...
    'ylim',[0,1]+[-1,1]*.05,...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Normalized trial');
    ylabel(sps(mm),'Normalized cumulative DA CS+ response');
    
    % trial selection
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    n_extension_trials = sum(data.experiment(trial_flags) == 'extension');
    trial_idcs = find(trial_flags,n_extension_trials*2,'last');
    n_trials2keep = n_extension_trials; % 150;
    trialdiff = n_extension_trials - n_trials2keep;
    trial_idcs = trial_idcs(trialdiff + 1 : n_trials2keep * 2 + trialdiff);
    x = 1 : n_trials2keep * 2;
    y_da = data.da.cs_response(trial_idcs);
    y_lick = data.lick.onset(trial_idcs);
  
    % normalization
    x = x ./ max(x);
    y_da = cumsum(y_da,'omitnan') ./ nansum(y_da);
    y_lick = cumsum(y_lick,'omitnan') ./ nansum(y_lick);
    
    % plot test 4 metrics
    plot(sps(mm),...
        x,y_da,'-k',...
        x,y_lick,'-r',...
        'linewidth',1.5);
    
    % pseudo-legend
    text(sps(mm),-.225,.5,'Normalized cumulative lick onset time',...
        'horizontalalignment','center',...
        'units','normalized',...
        'fontsize',14,...
        'rotation',90,...
        'color','r');
    
    % plot reference lines
    plot(sps(mm),[0,1],[0,1],'--k');
    plot(sps(mm),[1,1]*.5,[0,1],':k',...
        'linewidth',1.5);
end

%% plot test 5

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','test_5',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'xlim',[0,1]*50,...
    ...'ylim',[-1,1]*200,...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Normalized trial');
    ylabel(sps(mm),'Cumulative DA previous US response');
    
    % trial selection
    trial_flags = ...
        mouse_flags & ...
        reward_flags & ...
        extension_flags;
    x = 1:sum(trial_flags);
    y_da = data.da.initial_us_response(trial_flags);
    
    % !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
%     y_da = y_da - min(y_da);
    
    % normalization
    x = x;% ./ max(x);
    y_da = cumsum(y_da,'omitnan');% ./ nansum(y_da);
    
    % plot test 5 metrics
    plot(sps(mm),...
        x,y_da,'-k',...
        'linewidth',1.5);
    
    % plot reference line
    plot(sps(mm),xlim(sps(mm)),[0,0],'--k');
end










%% IRI vs CS response

% IRI type selection
iri_type = 'nominal';
% iri_type = 'actual';

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name',sprintf('test_2_%s',iri_type),...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(round(n_mice/4),round(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),sprintf('Previous %s IRI (s)',iri_type));
    ylabel(sps(mm),'DA response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.iri.(iri_type)(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.cs_response(trial_flags);
        betas = robustfit(x,y);
        scatter(sps(mm),...
            x,y,25,...
            'markerfacecolor',session_clrs(ss,:),...
            'markeredgecolor','none',...
            'markerfacealpha',.25);
        [~,idcs] = sort(x);
        plot(sps(mm),...
            x(idcs),X(idcs,:)*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x(idcs),X(idcs,:)*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.iri.(iri_type)(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.cs_response(trial_flags);
    betas = robustfit(x,y);
    [~,idcs] = sort(x);
    plot(sps(mm),...
        x(idcs),X(idcs,:)*betas,'--k',...
        'linewidth',1);
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end