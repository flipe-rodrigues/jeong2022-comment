%% initialization
close all;
clear;
clc;

%% directory settings
root_path = fileparts(pwd);
data_path = fullfile(root_path,'data');
data_dir = dir(data_path);
data_dir = data_dir(cellfun(@(x)~contains(x,'.'),{data_dir.name}));

%% mouse settings
mouse_ids = {data_dir.name};
mouse_ids = mouse_ids([6,2,3,4,5,1,7,8]);
mouse_ids = mouse_ids(~ismember(mouse_ids,'HJ_FP_M8'));
n_mice = numel(mouse_ids);

%% experiment settings
experiment_id = 'pavlovian';
subexperiment_id = 'acquisition';
cs_dur = 2;
trace_dur = 1;
csus_delay = cs_dur + trace_dur;

%% acquisition settings
fs = 120;
dt = 1 / fs;

%% smoothing kernels
lickrate_kernel = gammakernel('peakx',.15,'binwidth',dt);

%% analysis parameters
trial_period = [0,csus_delay] + [-2,7];
baseline_period = [-1,0];
roi_period = [0,2];
lick_period = trial_period + lickrate_kernel.paddx;

%% data parsing

% preallocation
cs_plus_labels = cell(n_mice,1);

% iterate through mice
for mm = 1 : n_mice
    
    % parse mouse directory
    mouse_path = fullfile(data_path,mouse_ids{mm},experiment_id);
    mouse_dir = dir([mouse_path,filesep,'*',subexperiment_id]);
    mouse_dir = mouse_dir(cellfun(@(x)~contains(x,'.'),{mouse_dir.name}));
    
    % parse session directory
    session_ids = {mouse_dir.name};
    session_days = cellfun(@(x)str2double(strrep(x,'Day','')),session_ids);
    [~,chrono_idcs] = sort(session_days);
    session_ids = session_ids(chrono_idcs);
    n_sessions = numel(session_ids);
    
    % sort sessions chronologically
    days = cellfun(@(x) sscanf(x,'Day%i'),session_ids);
    [~,chrono_idcs] = sort(days);
    session_ids = session_ids(chrono_idcs);
    
    % initialize mouse counters
    mouse_trial_counter = 0;
    
    % iterate through sessions
    for ss = 1 : n_sessions
        progressreport(ss,n_sessions,sprintf(...
            'parsing behavioral & photometry data (mouse %i/%i)',mm,n_mice));
        session_path = fullfile(mouse_path,session_ids{ss});
        
        %% load behavioral data
        bhv_id = sprintf('%s_%s_eventlog.mat',...
            mouse_ids{mm},strrep(session_ids{ss},['_',subexperiment_id],''));
        bhv_path = fullfile(session_path,bhv_id);
        load(bhv_path)
        
        %% parse events
        event_labels = categorical(...
            eventlog(:,1),[15,16,5,10,7,14,0],...
            {'CS1','CS2','lick','US','bg_rwd','trial_end','session_end'});
        event_times = eventlog(:,2);
        nosolenoid_flags = eventlog(:,3);
        event_idcs = (1 : numel(event_labels))';
        start_idx = find(ismember(event_labels,{'CS1','CS2'}),1);
        end_idx = min(...
            find(event_labels == 'trial_end',1,'last') + 1,...
            find(event_labels == 'session_end'));
        if isempty(end_idx)
            end_idx = numel(event_labels);
        end
        session_dur = event_times(end_idx) - event_times(start_idx);
        
        %% event selection
        valid_flags = ...
            ~isundefined(event_labels) & ...
            ~nosolenoid_flags & ...
            event_idcs >= start_idx & ...
            event_idcs < end_idx;
        n_events = sum(valid_flags);
        event_idcs = (1 : n_events)';
        event_labels = removecats(event_labels(valid_flags),'end');
        event_times = event_times(valid_flags);
        
        %% parse CS
        cs_flags = ismember(event_labels,{'CS1','CS2'});
        cs_events = find(cs_flags);
        cs_labels = event_labels(cs_flags);
        cs_times = event_times(cs_flags);
        n_trials = sum(cs_flags);
        trial_idcs = (1 : n_trials)';
        
        %% parse US
        us_flags = event_labels == 'US';
        us_events = find(us_flags);
        
        % preallocation
        us_times = nan(n_trials,1);
        
        % iterate through trials
        for ii = 1 : n_trials
            trial_start_idx = cs_events(ii);
            if ii < n_trials
                trial_end_idx = cs_events(ii+1);
            else
                trial_end_idx = n_events;
            end
            us_idx = find(us_flags & ...
                event_idcs >= trial_start_idx & ...
                event_idcs < trial_end_idx,1,'last');
            if ~isempty(us_idx)
                us_times(ii) = event_times(us_idx);
            end
        end
        
        %% parse first licks after reward delivery
        lick_flags = event_labels == 'lick';
        
        % preallocation
        reward_times = nan(n_trials,1);
        
        % iterate through trials
        for ii = 1 : n_trials
            trial_idx = find(lick_flags & ...
                event_times >= us_times(ii),1,'first');
            if ~isempty(trial_idx)
                reward_times(ii) = event_times(trial_idx);
            end
        end
        
        %% compute inter-reward-intervals (IRI, nominal & actual)
        iri_nominal = nan(n_trials,1);
        iri_actual = nan(n_trials,1);
        iri_nominal(~isnan(us_times)) = ...
            diff([0;us_times((~isnan(us_times)))]);
        iri_actual(~isnan(reward_times)) = ...
            diff([0;reward_times((~isnan(reward_times)))]);
        
        %% parse reaction time
        reaction_times = reward_times - us_times;
        
        %% load photometry data
        photometry_path = fullfile(session_path,'Photometry.mat');
        load(photometry_path);
        
        %% parse licks
        lick_times = event_times(lick_flags);
        lick_edges = event_times(1) : dt : event_times(end);
        lick_counts = histcounts(lick_times,lick_edges);
        
        % get lick-aligned snippets of lick counts
        [lick_baseline_snippets,~] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,cs_times,baseline_period,dt);
        [lick_cs_snippets,~] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,cs_times,roi_period,dt);
        [lick_anticipatory_snippets,lick_anticipatory_time] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,cs_times,[0,csus_delay],dt);
        [lick_trial_snippets,lick_trial_time] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,cs_times,lick_period,dt);
        [lick_reward_snippets,lick_reward_time] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,reward_times,lick_period,dt);
        
        % preallocation
        lick_rate = nan(n_trials,1);
        lick_onset = nan(n_trials,1);
        
        % iterate through trials
        for ii = 1 : n_trials
            
            % compute 'lick rate' metric
            lick_rate(ii) = ...
                sum(lick_cs_snippets(ii,:)) / range(roi_period) - ...
                sum(lick_baseline_snippets(ii,:)) / range(baseline_period);
            
            % compute 'median lick onset time' metric
            lick_cdf = cumsum(lick_anticipatory_snippets(ii,:));
            lick_onset_idx = find(lick_cdf >= .5,1);
            if ~isempty(lick_onset_idx)
                lick_onset(ii) = lick_anticipatory_time(lick_onset_idx);
            end
        end
        
        %% compute inter-lick-intervals (ILI)
        ili_events = diff([nan;lick_times]);
        ili_idcs = sum(lick_times > cs_times',2);
        ili_trials = arrayfun(@(x)ili_events(ili_idcs == x),trial_idcs,...
            'uniformoutput',false);
        
        %% parse photometry data
        
        % correct for nonstationary sampling frequency
        time = T(1) : dt : T(end);
        da = interp1(T,dff,time);
        
        % get event-aligned snippets of DA
        [da_cs_baseline_snippets,da_cs_baseline_time] = signal2eventsnippets(...
            time,da,cs_times,baseline_period,dt);
        [da_cs_snippets,da_cs_time] = signal2eventsnippets(...
            time,da,cs_times,roi_period,dt);
        [da_reward_baseline_snippets,da_reward_baseline_time] = signal2eventsnippets(...
            time,da,reward_times,baseline_period,dt);
        [da_reward_snippets,da_reward_time] = signal2eventsnippets(...
            time,da,reward_times,roi_period,dt);
        [da_trial_snippets,da_trial_time] = signal2eventsnippets(...
            time,da,cs_times,trial_period,dt);
        
        % preallocation
        da_cs_response = nan(n_trials,1);
        da_reward_response = nan(n_trials,1);
        
        % iterate through trials
        for ii = 1 : n_trials
            
            % compute 'DA response' metric
            da_cs_response(ii) = ...
                sum(da_cs_snippets(ii,:)) / range(roi_period) - ...
                sum(da_cs_baseline_snippets(ii,:)) / range(baseline_period);
            da_reward_response(ii) = ...
                sum(da_reward_snippets(ii,:)) / range(roi_period) - ...
                sum(da_reward_baseline_snippets(ii,:)) / range(baseline_period);
        end
        
        %% organize session data into tables
        
        % construct trial table
        index_table = table(...
            trial_idcs + mouse_trial_counter,...
            trial_idcs,...
            'variablenames',{...
            'mouse',...
            'session',...
            });
        
        % construct time table
        time_table = table(...
            cs_times,...
            us_times,...
            reward_times,...
            'variablenames',{...
            'cs',...
            'us',...
            'reward',...
            });
        
        % construct trial table
        trial_table = table(...
            index_table,...
            time_table,...
            cs_labels,...
            'variablenames',{...
            'index',...
            'time',...
            'cs',...
            });
        
        % construct IRI table
        iri_table = table(...
            iri_nominal,...
            iri_actual,...
            'variablenames',{...
            'nominal',...
            'actual',...
            });
        
        % construct lick table
        lick_table = table(...
            lick_trial_snippets,...
            lick_reward_snippets,...
            lick_rate,...
            lick_onset,...
            'variablenames',{'delivery','collection','rate','onset'});
        
        % construct DA table
        da_table = table(...
            da_trial_snippets,...
            da_cs_baseline_snippets,...
            da_cs_snippets,...
            da_reward_baseline_snippets,...
            da_reward_snippets,...
            da_cs_response,...
            da_reward_response,...
            'variablenames',{...
            'trial',...
            'cs_baseline',...
            'cs',...
            'reward_baseline',...
            'reward',...
            'cs_response',...
            'reward_response'});
        
        % concatenate into a session table
        session_data = table(...
            categorical(cellstr(repmat(mouse_ids{mm},n_trials,1)),mouse_ids),...
            repmat(ss,n_trials,1),...
            trial_table,...
            iri_table,...
            reaction_times,...
            lick_table,...
            ili_trials,...
            da_table,...
            'variablenames',{...
            'mouse',...
            'session',...
            'trial'...
            'iri',...
            'rt',...
            'lick',...
            'ili',...
            'da',...
            });
        
        % increment mouse counters
        mouse_trial_counter = mouse_trial_counter + n_trials;
        
        % append to the current mouse's table
        if ss == 1
            mouse_data = session_data;
        else
            mouse_data = [mouse_data; session_data];
        end
    end
    
    % append to the final data table
    if mm == 1
        data = mouse_data;
    else
        data = [data; mouse_data];
    end
end

%% reaction time bin settings
rt_binwidth = 1 / 15;
rt_roi = [trial_period(1),trial_period(2)];
rt_edges = rt_roi(1) : rt_binwidth : rt_roi(2);

%% flag rewarded trials
reward_flags = ~isnan(data.trial.time.reward);

%% plot reaction time distributions

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','reaction_times',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Reaction time (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        reaction_times = data.rt(trial_flags);
        plot(sps(mm),...
            data.trial.index.mouse(trial_flags),reaction_times,'.',...
            'markersize',7.5,...
            'color',session_clrs(ss,:));
        errorbar(sps(mm),...
            nanmean(data.trial.index.mouse(trial_flags)),...
            nanmedian(reaction_times),...
            quantile(reaction_times,.25)-nanmedian(reaction_times),...
            quantile(reaction_times,.75)-nanmedian(reaction_times),...
            'color',session_clrs(ss,:),...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','w',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
    trial_flags = ...
        mouse_flags;
    reaction_times = data.rt(trial_flags);
    ylim(sps(mm),quantile(reaction_times,[0,.95]));
end

%% plot previous IRI distributions (nominal)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','iri_nominal',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Previous nominal IRI (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        iri = data.iri.nominal(trial_flags);
        plot(sps(mm),...
            data.trial.index.mouse(trial_flags),iri,'.',...
            'markersize',5,...
            'color',session_clrs(ss,:));
        errorbar(sps(mm),...
            nanmean(data.trial.index.mouse(trial_flags)),...
            nanmean(iri),...
            nanstd(iri),...
            'color',session_clrs(ss,:),...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','w',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
    
    % plot nominal mean
    plot(sps(mm),xlim(sps(mm)),[1,1]*12,'--k');
end

%% plot previous IRI distributions (actual)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','iri_actual',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Previous actual IRI (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        iri = data.iri.actual(trial_flags);
        plot(sps(mm),...
            data.trial.index.mouse(trial_flags),iri,'.',...
            'markersize',5,...
            'color',session_clrs(ss,:));
        errorbar(sps(mm),...
            nanmean(data.trial.index.mouse(trial_flags)),...
            nanmean(iri),...
            nanstd(iri),...
            'color',session_clrs(ss,:),...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','w',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
    
    % plot nominal mean
    plot(sps(mm),xlim(sps(mm)),[1,1]*12,'--k');
end

%% plot inter-lick-interval distributions

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','ili',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylim',[.05,10],...
    'yscale','log',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Inter-lick-interval (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        trial_idcs = find(trial_flags);
        n_trials = sum(trial_flags);
        
        % iterate through trials
        for tt = 1 : n_trials
            trial_idx = trial_idcs(tt);
            ili_trials = data.ili{trial_idx};
            n_licks = numel(ili_trials);
            plot(sps(mm),...
                repmat(data.trial.index.mouse(trial_idx),n_licks,1),ili_trials,'.',...
                'markersize',1,...
                'color','k');
        end
        
        % plot session boundary
        plot(sps(mm),...
            [1,1]*sum(mouse_flags & data.session <= ss),ylim(sps(mm)),...
            'linestyle','-',...
            'color','k');
    end
end

%% plot delivery-aligned reaction time distributions (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','rt_delivery_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ytick',[],...
    'layer','top',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'Reaction time PDF');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        rt_counts = histcounts(data.rt(trial_flags),rt_edges);
        rt_x = rt_edges(1:end-1);
        rt_y = normalize01(rt_counts,2) * .85;
        rt_x_ups = sort([rt_edges(2:end),rt_edges(2:end)]);
        rt_y_ups = upsample(rt_y,2);
        rt_y_ups(2:2:end-1) = rt_y(2:end);
        xpatch = [rt_x_ups,fliplr(rt_x_ups)];
        ypatch = [rt_y_ups,zeros(size(rt_y_ups))] + ss;
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facecolor',session_clrs(ss,:),...
            'facealpha',.25,...
            'linewidth',1.5);
        stairs(sps(mm),...
            rt_x,rt_y + ss,...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % update axes settings
    set(sps(mm),...
        'ylim',[1,n_sessions+1]+[-1,1]*.05*n_sessions);
end

%% plot collection-aligned reaction time distributions (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','rt_collection_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',[baseline_period(1),roi_period(2)],...
    'ytick',[],...
    'layer','top',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since 1^{st} rewarding lick (s)');
    ylabel(sps(mm),'Reaction time PDF');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        rt_counts = histcounts(-data.rt(trial_flags),rt_edges);
        rt_x = rt_edges(1:end-1);
        rt_y = normalize01(rt_counts,2) * .85;
        rt_x_ups = sort([rt_edges(2:end),rt_edges(2:end)]);
        rt_y_ups = upsample(rt_y,2);
        rt_y_ups(2:2:end-1) = rt_y(2:end);
        xpatch = [rt_x_ups,fliplr(rt_x_ups)];
        ypatch = [rt_y_ups,zeros(size(rt_y_ups))] + ss;
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facecolor',session_clrs(ss,:),...
            'facealpha',.25,...
            'linewidth',1.5);
        stairs(sps(mm),...
            rt_x,rt_y + ss,...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % update axes settings
    set(sps(mm),...
        'ylim',[1,n_sessions+1]+[-1,1]*.05*n_sessions);
end

%% plot CS- response dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','cs-_response',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'DA CS- response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            ~reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.cs_response(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        ~reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.cs_response(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot CS+ response dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','cs+_response',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'DA CS+ response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.cs_response(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.cs_response(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot reward response dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','reward_response',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'DA reward response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.da.reward_response(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.da.reward_response(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot anticipatory lick rate dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','lick_rate',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Anticipatory lick rate (Hz)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.lick.rate(trial_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.lick.rate(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% plot anticipatory lick onset time dynamics

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','lick_onset_time',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.trial.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Trial #');
    ylabel(sps(mm),'Anticipatory lick onset time (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        x = data.trial.index.mouse(trial_flags);
        X = [ones(size(x)),x];
        y = data.lick.onset(trial_flags);
        if sum(~isnan(y)) <= 2
            continue;
        end
        betas = robustfit(x,y);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    X = [ones(size(x)),x];
    y = data.lick.onset(trial_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

%% reward delivery-aligned DA rasters

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_rasters',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags;
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'Trial #');
    
    % plot DA raster
    da_mat = data.da.trial(trial_flags,:);
    [~,sorted_idcs] = sort(data.trial.cs(trial_flags));
    imagesc(sps(mm),trial_period,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reference lines
    plot(sps(mm),xlim(sps(mm)),...
        [1,1]*(sum(data.trial.cs(trial_flags)=='CS1')+.5),...
        'color',[1,1,1],...
        'linewidth',1.5);
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
    plot(sps(mm),[0,0]+cs_dur,ylim(sps(mm)),'--w');
    plot(sps(mm),[0,0]+cs_dur+trace_dur,ylim(sps(mm)),'--w');
end

%% reward delivery-aligned average DA (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        da_mat = data.da.trial(trial_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(trial_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_trial_time(~nan_flags),...
            fliplr(da_trial_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            da_trial_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % iterate through sessions
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        da_mat = data.da.trial(trial_flags,:);
        da_mu = nanmean(da_mat,1);
        
        % plot median reaction time
        rt_med = cs_dur + trace_dur + nanmedian(data.rt(trial_flags));
        idx = find(da_trial_time >= min(rt_med, max(xlim(sps(mm)))),1);
        if rt_med > max(xlim(sps(mm)))
            marker = '>';
        else
            marker = 'v';
        end
        plot(sps(mm),...
            da_trial_time(idx),da_mu(idx),...
            'marker',marker,...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % pseudo legend
    xleg = min(xlim(sps(mm)))+.075*range(xlim(sps(mm)));
    yleg = max(ylim(sps(mm)))-.25*range(ylim(sps(mm)));
    plot(sps(mm),...
        xleg,yleg,...
        'color','none',...
        'marker','v',...
        'markersize',7.5,...
        'markeredgecolor','k',...
        'markerfacecolor','w',...
        'linewidth',1.5);
    text(sps(mm),...
        xleg+.05*range(xlim(sps(mm))),yleg,...
        '$\hat{rt}$',...
        'horizontalalignment','left',...
        'interpreter','latex',...
        'fontsize',12);
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[0,0]+cs_dur,ylim(sps(mm)),'--k');
    plot(sps(mm),[0,0]+cs_dur+trace_dur,ylim(sps(mm)),'--k');
end

%% reward collection-aligned DA rasters

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_rasters',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',[baseline_period(1),roi_period(2)],...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since 1^{st} rewarding lick (s)');
    ylabel(sps(mm),'Trial #');
    
    % plot DA raster
    da_mat = [...
        data.da.reward_baseline(trial_flags,1:end-1),...
        data.da.reward(trial_flags,:)];
    imagesc(sps(mm),...
        [baseline_period(1),roi_period(2)],[],...
        da_mat,quantile(da_mat,[.001,.999],'all')');
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

%% reward collection-aligned average DA (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',[baseline_period(1),roi_period(2)],...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since 1^{st} rewarding lick (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        da_mat = [...
            data.da.reward_baseline(trial_flags,1:end-1),...
            data.da.reward(trial_flags,:)];
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(trial_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        da_time = unique([da_reward_baseline_time,da_reward_time]);
        xpatch = [da_time(~nan_flags),...
            fliplr(da_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            da_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % iterate through sessions
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        da_mat = [...
            data.da.reward_baseline(trial_flags,1:end-1),...
            data.da.reward(trial_flags,:)];
        da_mu = nanmean(da_mat,1);
        
        % plot median reaction time
        rt_med = -nanmedian(data.rt(trial_flags));
        idx = find(da_time >= min(rt_med, max(xlim(sps(mm)))),1);
        if rt_med < min(xlim(sps(mm)))
            marker = '<';
        else
            marker = 'v';
        end
        plot(sps(mm),...
            da_time(idx),da_mu(idx),...
            'marker',marker,...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % pseudo legend
    xleg = min(xlim(sps(mm)))+.075*range(xlim(sps(mm)));
    yleg = max(ylim(sps(mm)))-.25*range(ylim(sps(mm)));
    plot(sps(mm),...
        xleg,yleg,...
        'color','none',...
        'marker','v',...
        'markersize',7.5,...
        'markeredgecolor','k',...
        'markerfacecolor','w',...
        'linewidth',1.5);
    text(sps(mm),...
        xleg+.05*range(xlim(sps(mm))),yleg,...
        '$\hat{rt}$',...
        'horizontalalignment','left',...
        'interpreter','latex',...
        'fontsize',12);
    
    % plot response windows used to compute DA responses
    yylim = ylim(sps(mm));
    yymax = max(yylim) * 1.1;
    patch(sps(mm),...
        [baseline_period,fliplr(baseline_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'w',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    patch(sps(mm),...
        [roi_period,fliplr(roi_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[1,1]*baseline_period(2),ylim(sps(mm)),'-k',...
        'linewidth',1);
end

%% reward delivery-aligned lick rasters

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','lick_delivery_rasters',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',trial_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    trial_flags = ...
        mouse_flags;
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'Trial #');
    
    % plot lick raster
    lick_counts = data.lick.delivery(trial_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_rates(nan_flags) = nan;
    [~,sorted_idcs] = sort(data.trial.cs(trial_flags));
    imagesc(sps(mm),lick_trial_time,[],...
        lick_rates(sorted_idcs,:),quantile(lick_rates,[.001,.999],'all')');

    % plot reference lines
    plot(sps(mm),xlim(sps(mm)),...
        [1,1]*(sum(data.trial.cs(trial_flags)=='CS1')+.5),...
        'color',[1,1,1],...
        'linewidth',1.5);
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
    plot(sps(mm),[0,0]+cs_dur,ylim(sps(mm)),'--w');
    plot(sps(mm),[0,0]+cs_dur+trace_dur,ylim(sps(mm)),'--w');
end

%% reward delivery-aligned lick rate (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_delivery_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since CS onset (s)');
    ylabel(sps(mm),'Lick rate (Hz)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            reward_flags;
        if sum(trial_flags) == 0
            continue;
        end
        
        % fetch relevant events & ensure no overlaps
        lick_counts = data.lick.delivery(trial_flags,:);
        nan_flags = isnan(lick_counts);
        lick_counts(nan_flags) = 0;
        lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
        lick_rates(nan_flags) = nan;
        lick_mu = nanmean(lick_rates,1);
        lick_std = nanstd(lick_rates,0,1);
        lick_sem = lick_std ./ sqrt(sum(~isnan(lick_rates)));
        nan_flags = isnan(lick_mu) | isnan(isnan(lick_sem)) | lick_sem == 0;
        xpatch = [lick_trial_time(~nan_flags),...
            fliplr(lick_trial_time(~nan_flags))];
        ypatch = [lick_mu(~nan_flags)-lick_sem(~nan_flags),...
            fliplr(lick_mu(~nan_flags)+lick_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            lick_trial_time(~nan_flags),lick_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[0,0]+cs_dur,ylim(sps(mm)),'--k');
    plot(sps(mm),[0,0]+cs_dur+trace_dur,ylim(sps(mm)),'--k');
end

%% reward collection-aligned lick rate (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_collection_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since 1^{st} rewarding lick (s)');
    ylabel(sps(mm),'Lick rate (Hz)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(trial_flags) == 0
            continue;
        end
        
        % fetch relevant events & ensure no overlaps
        lick_counts = data.lick.collection(trial_flags,:);
        nan_flags = isnan(lick_counts);
        lick_counts(nan_flags) = 0;
        lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
        lick_rates(nan_flags) = nan;
        lick_mu = nanmean(lick_rates,1);
        lick_std = nanstd(lick_rates,0,1);
        lick_sem = lick_std ./ sqrt(sum(~isnan(lick_rates)));
        nan_flags = isnan(lick_mu) | isnan(isnan(lick_sem)) | lick_sem == 0;
        xpatch = [lick_reward_time(~nan_flags),...
            fliplr(lick_reward_time(~nan_flags))];
        ypatch = [lick_mu(~nan_flags)-lick_sem(~nan_flags),...
            fliplr(lick_mu(~nan_flags)+lick_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            lick_reward_time(~nan_flags),lick_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
end

%% plot test 3

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','test_3',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',[0,1]+[-1,1]*.05,...
    'ylim',[0,1]+[-1,1]*.05,...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Normalized trial');
    ylabel(sps(mm),'Normalized cumulative DA CS+ response');
    
    % trial selection
    trial_flags = ...
        mouse_flags & ...
        reward_flags;
    x = data.trial.index.mouse(trial_flags);
    y_da = data.da.cs_response(trial_flags);
    y_lick_rate = data.lick.rate(trial_flags);
    y_lick_onset = data.lick.onset(trial_flags);
        
    % !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    y_da = y_da - min(y_da);
    y_lick_rate = y_lick_rate - min(y_lick_rate);
    y_lick_onset = y_lick_onset - min(y_lick_onset);
    
    % normalization
    x = x ./ max(x);
    y_da = cumsum(y_da,'omitnan') ./ nansum(y_da);
    y_lick_rate = cumsum(y_lick_rate,'omitnan') ./ nansum(y_lick_rate);
    y_lick_onset = cumsum(y_lick_onset,'omitnan') ./ nansum(y_lick_onset);

    % plot test 3 metrics
    plot(sps(mm),...
        x,y_da,'-k',...
        x,y_lick_rate,'-r',...
        x,y_lick_onset,'--r',...
        'linewidth',1.5);

    % pseudo-legend
    text(sps(mm),-.225,.5,'Normalized cumulative lick rate',...
        'horizontalalignment','center',...
        'units','normalized',...
        'fontsize',14,...
        'rotation',90,...
        'color','r');

    % plot reference line
    plot(sps(mm),[0,1],[0,1],'--k');
end