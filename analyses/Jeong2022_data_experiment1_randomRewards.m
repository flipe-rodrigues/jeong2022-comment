%% preface
Jeong2022_data_preface;

%% experiment settings
experiment_id = 'randomrewards';

%% selection criteria
iri_cutoff = 3;
rt_cutoffs = [0,10];

%% analysis parameters
delivery_period = [-1,1] * iri_cutoff;
collection_period = delivery_period;
baseline_period = [-2,-.5];
reward_period = [-.5,1];

%% training stage settings
n_stages = 3;
stage_clrs = gray(n_stages+1);

%% data parsing

% iterate through mice
for mm = 1 : n_mice
    
    % parse mouse directory
    mouse_path = fullfile(data_path,mouse_ids{mm},experiment_id);
    mouse_dir = dir(mouse_path);
    mouse_dir = mouse_dir(cellfun(@(x)~contains(x,'.'),{mouse_dir.name}));
    
    % parse session directory
    session_ids = {mouse_dir.name};
    session_days = cellfun(@(x)str2double(strrep(x,'Day','')),session_ids);
    [~,sorted_idcs] = sort(session_days);
    session_ids = session_ids(sorted_idcs);
    n_sessions = numel(session_ids);
    
    % sort sessions chronologically
    days = cellfun(@(x) sscanf(x,'Day%i'),session_ids);
    [~,chrono_idcs] = sort(days);
    session_ids = session_ids(chrono_idcs);
    
    % initialize mouse counters
    mouse_reward_counter = 0;
    
    % iterate through sessions
    for ss = 1 : n_sessions
        progressreport(ss,n_sessions,sprintf(...
            'parsing behavioral & photometry data (mouse %i/%i)',mm,n_mice));
        session_path = fullfile(mouse_path,session_ids{ss});
        
        %% load behavioral data
        bhv_id = sprintf('%s_%s_eventlog.mat',...
            mouse_ids{mm},session_ids{ss});
        bhv_path = fullfile(session_path,bhv_id);
        load(bhv_path)
        
        %% parse events
        event_labels = categorical(...
            eventlog(:,1),[5,7,0],{'lick','reward','end'});
        event_times = eventlog(:,2);
        event_idcs = (1 : numel(event_labels))';
        start_idx = find(event_labels == 'reward',1);
        end_idx = find(event_labels == 'end');
        session_dur = event_times(end_idx) - event_times(start_idx);
        
        %% event selection
        valid_flags = ...
            ~isundefined(event_labels) & ...
            event_idcs >= start_idx & ...
            event_idcs < end_idx;
        n_events = sum(valid_flags);
        event_idcs = (1 : n_events)';
        event_labels = removecats(event_labels(valid_flags),'end');
        event_times = event_times(valid_flags);
        
        %% parse rewards
        reward_flags = event_labels == 'reward';
        reward_events = find(reward_flags);
        reward_times = event_times(reward_flags);
        n_rewards = sum(reward_flags);
        reward_idcs = (1 : n_rewards)';
        
        %% parse first licks after reward delivery
        lick_flags = event_labels == 'lick';
        firstlick_flags = [false; diff(lick_flags) == 1];
        firstlick_events = event_idcs(firstlick_flags);
        firstlick_times = event_times(firstlick_flags);
        firstlick_idcs = sum(reward_times > firstlick_times',2) + 1;
        firstlick_times = firstlick_times(firstlick_idcs);
        n_firstlicks = sum(firstlick_flags);
        
        %% compute inter-reward-intervals (IRI, nominal & actual)
        iri_nominal = diff([0;reward_times]);
        iri_actual = diff([0;firstlick_times]);
        
        %% parse reaction time
        reaction_times = firstlick_times - reward_times;
        
        %% load photometry data
        photometry_path = fullfile(session_path,'Photometry.mat');
        load(photometry_path);
        
        % renormalization
        if want2renormalize
            f0 = abs(quantile(dff,.1));
            dff = (dff - f0) ./ f0;
        end
        
        %% parse licks
        lick_times = event_times(lick_flags);
        lick_edges = event_times(1) : dt : event_times(end);
        lick_counts = histcounts(lick_times,lick_edges);
        
        % get lick-aligned snippets of lick counts
        [lick_delivery_snippets,lick_delivery_time] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,reward_times,...
            delivery_period + lickrate_kernel.paddx,dt);
        [lick_collection_snippets,lick_collection_time] = signal2eventsnippets(...
            lick_edges(1:end-1),lick_counts,firstlick_times,...
            collection_period + lickrate_kernel.paddx,dt);
        
        %% compute inter-lick-intervals (ILI)
        ili_events = diff([nan;lick_times]);
        ili_idcs = sum(lick_times > reward_times',2);
        ili_rewards = arrayfun(@(x)ili_events(ili_idcs == x),reward_idcs,...
            'uniformoutput',false);
        
        %% parse photometry data
        
        % correct for nonstationary sampling frequency
        time = T(1) : dt : T(end);
        da = interp1(T,dff,time);
        
        % get event-aligned snippets of DA
        [da_baseline_snippets,da_baseline_time] = signal2eventsnippets(...
            time,da,firstlick_times,baseline_period,dt);
        [da_reward_snippets,da_reward_time] = signal2eventsnippets(...
            time,da,firstlick_times,reward_period,dt);
        [da_delivery_snippets,da_delivery_time] = signal2eventsnippets(...
            time,da,reward_times,delivery_period,dt);
        [da_collection_snippets,da_collection_time] = signal2eventsnippets(...
            time,da,firstlick_times,collection_period,dt);

        % preallocation
        da_reward_response = nan(n_rewards,1);
        
        % iterate through rewards
        for ii = 1 : n_rewards
            
            % compute 'DA response' metric
            da_reward_response(ii) = ...
                sum(da_reward_snippets(ii,:)) / range(reward_period) - ...
                sum(da_baseline_snippets(ii,:)) / range(baseline_period);
        end
        
        %% organize session data into tables
        
        % construct trial table
        index_table = table(...
            reward_idcs + mouse_reward_counter,...
            reward_idcs,...
            'variablenames',{...
            'mouse',...
            'session',...
            });
        
        % construct time table
        time_table = table(...
            reward_times,...
            firstlick_times,...
            'variablenames',{...
            'delivery',...
            'collection',...
            });
        
        % construct reward table
        reward_table = table(...
            index_table,...
            time_table,...
            'variablenames',{...
            'index',...
            'time',...
            });
        
        % construct IRI table
        iri_table = table(...
            iri_nominal,...
            iri_actual,...
            'variablenames',{...
            'nominal',...
            'actual',...
            });
        
        % construct lick table
        lick_table = table(...
            lick_delivery_snippets,...
            lick_collection_snippets,...
            'variablenames',{...
            'delivery',...
            'collection'});
        
        % construct DA table
        da_table = table(...
            da_delivery_snippets,...
            da_collection_snippets,...
            da_reward_response,...
            'variablenames',{...
            'delivery',...
            'collection',...
            'response'});
        
        % concatenate into a session table
        session_data = table(...
            categorical(cellstr(repmat(mouse_ids{mm},n_rewards,1)),mouse_ids),...
            repmat(ss,n_rewards,1),...
            reward_table,...
            iri_table,...
            reaction_times,...
            lick_table,...
            ili_rewards,...
            da_table,...
            'variablenames',{...
            'mouse',...
            'session',...
            'reward'...
            'iri',...
            'rt',...
            'lick',...
            'ili',...
            'da',...
            });
        
        % increment mouse counters
        mouse_reward_counter = mouse_reward_counter + n_rewards;
        
        % append to the current mouse's table
        if ss == 1
            mouse_data = session_data;
        else
            mouse_data = [mouse_data; session_data];
        end
    end
    
    % append to the final data table
    if mm == 1
        data = mouse_data;
    else
        data = [data; mouse_data];
    end
end

%% reward selection criteria
iri_nominal_flags = ...
    data.iri.nominal >= iri_cutoff & ...
    [data.iri.nominal(2:end); nan] >= iri_cutoff;
iri_actual_flags = ...
    data.iri.actual >= iri_cutoff & ...
    [data.iri.actual(2:end); nan] >= iri_cutoff;
iri_flags = ...
    iri_nominal_flags & ...
    iri_actual_flags;
rt_flags = ...
    data.rt >= rt_cutoffs(1) & ...
    data.rt <= rt_cutoffs(2);
nan_flags = ...
    all(isnan(data.da.delivery),2) | ...
    all(isnan(data.da.collection),2);
valid_flags = ...
    rt_flags & ...
    iri_flags & ...
    ~nan_flags;

%% reaction time bin settings
rt_binwidth = 1 / 15;
rt_roi = [delivery_period(1),delivery_period(2)];
rt_edges = rt_roi(1) : rt_binwidth : rt_roi(2);

%% plot reaction time distributions

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','reaction_times',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.reward.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Reward #');
    ylabel(sps(mm),'Reaction time (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        reaction_times = data.rt(reward_flags);
        plot(sps(mm),...
            data.reward.index.mouse(reward_flags),reaction_times,'.',...
            'markersize',7.5,...
            'color',session_clrs(ss,:));
        errorbar(sps(mm),...
            nanmean(data.reward.index.mouse(reward_flags)),...
            nanmedian(reaction_times),...
            quantile(reaction_times,.25)-nanmedian(reaction_times),...
            quantile(reaction_times,.75)-nanmedian(reaction_times),...
            'color',session_clrs(ss,:),...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','w',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    reaction_times = data.rt(reward_flags);
    ylim(sps(mm),quantile(reaction_times,[0,.95]));
end

%% plot previous IRI distributions (nominal)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','iri_nominal',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.reward.index.mouse),...
    'ylim',[0,60],...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Reward #');
    ylabel(sps(mm),'Previous nominal IRI (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        iri = data.iri.nominal(reward_flags);
        plot(sps(mm),...
            data.reward.index.mouse(reward_flags),iri,'.',...
            'markersize',5,...
            'color',session_clrs(ss,:));
        errorbar(sps(mm),...
            nanmean(data.reward.index.mouse(reward_flags)),...
            nanmean(iri),...
            nanstd(iri),...
            'color',session_clrs(ss,:),...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','w',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
    
    % plot nominal mean
    plot(sps(mm),xlim(sps(mm)),[1,1]*12,'--k');
end

%% plot previous IRI distributions (actual)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','iri_actual',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.reward.index.mouse),...
    'ylim',[0,60],...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Reward #');
    ylabel(sps(mm),'Previous actual IRI (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        iri = data.iri.actual(reward_flags);
        plot(sps(mm),...
            data.reward.index.mouse(reward_flags),iri,'.',...
            'markersize',5,...
            'color',session_clrs(ss,:));
        errorbar(sps(mm),...
            nanmean(data.reward.index.mouse(reward_flags)),...
            nanmean(iri),...
            nanstd(iri),...
            'color',session_clrs(ss,:),...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','w',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
    
    % plot nominal mean
    plot(sps(mm),xlim(sps(mm)),[1,1]*12,'--k');
end

%% plot reaction time vs IRI

% IRI type selection
iri_type = 'nominal';
% iri_type = 'actual';

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','reaction_times_vs_IRI',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'xscale','linear',...
    'yscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),sprintf('Previous %s IRI (s)',iri_type));
    ylabel(sps(mm),'Reaction time (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        x = data.iri.(iri_type)(reward_flags);
        X = [ones(size(x)),x];
        y = data.rt(reward_flags);
        betas = robustfit(x,y);
        scatter(sps(mm),...
            x,y,25,...
            'markerfacecolor',session_clrs(ss,:),...
            'markeredgecolor','none',...
            'markerfacealpha',.25);
        [~,idcs] = sort(x);
        plot(sps(mm),...
            x(idcs),X(idcs,:)*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x(idcs),X(idcs,:)*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    x = data.iri.(iri_type)(reward_flags);
    X = [ones(size(x)),x];
    y = data.rt(reward_flags);
    betas = robustfit(x,y);
    [~,idcs] = sort(x);
    plot(sps(mm),...
        x(idcs),X(idcs,:)*betas,'--k',...
        'linewidth',1);
    xlim(sps(mm),quantile(x,[0,.95]));
    ylim(sps(mm),quantile(y,[0,.95]));
end

%% plot inter-lick-interval distributions

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','ili',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.reward.index.mouse),...
    'ylim',[.05,10],...
    'yscale','log',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Reward #');
    ylabel(sps(mm),'Inter-lick-interval (s)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags;
        reward_idcs = find(reward_flags);
        n_rewards = sum(reward_flags);
        
        % iterate through rewards
        for rr = 1 : n_rewards
            reward_idx = reward_idcs(rr);
            ili_rewards = data.ili{reward_idx};
            n_licks = numel(ili_rewards);
            plot(sps(mm),...
                repmat(data.reward.index.mouse(reward_idx),n_licks,1),ili_rewards,'.',...
                'markersize',1,...
                'color','k');
        end
        
        % plot session boundary
        plot(sps(mm),...
            [1,1]*sum(mouse_flags & data.session <= ss),ylim(sps(mm)),...
            'linestyle','-',...
            'color','k');
    end
end

%% plot delivery-aligned reaction time distributions (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','rt_delivery_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ytick',[],...
    'layer','top',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Reaction time PDF');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        rt_counts = histcounts(data.rt(reward_flags),rt_edges);
        rt_x = rt_edges(1:end-1);
        rt_y = normalize01(rt_counts,2) * .85;
        rt_x_ups = sort([rt_edges(2:end),rt_edges(2:end)]);
        rt_y_ups = upsample(rt_y,2);
        rt_y_ups(2:2:end-1) = rt_y(2:end);
        xpatch = [rt_x_ups,fliplr(rt_x_ups)];
        ypatch = [rt_y_ups,zeros(size(rt_y_ups))] + ss;
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facecolor',session_clrs(ss,:),...
            'facealpha',.25,...
            'linewidth',1.5);
        stairs(sps(mm),...
            rt_x,rt_y + ss,...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % update axes settings
    set(sps(mm),...
        'ylim',[1,n_sessions+1]+[-1,1]*.05*n_sessions);
end

%% plot delivery-aligned reaction time distributions (split by training stage)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','rt_delivery_stage',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ylim',[1,n_stages+1]+[-1,1]*.05*n_stages,...
    'ytick',[],...
    'layer','top',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% graphical object preallocation
p = gobjects(n_stages,1);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Reaction time PDF');
    
    % compute stage boundaries
    n_trials = sum(mouse_flags);
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        rt_counts = histcounts(data.rt(reward_flags),rt_edges);
        rt_x = rt_edges(1:end-1);
        rt_y = normalize01(rt_counts,2) * .85;
        rt_x_ups = sort([rt_edges(2:end),rt_edges(2:end)]);
        rt_y_ups = upsample(rt_y,2);
        rt_y_ups(2:2:end-1) = rt_y(2:end);
        xpatch = [rt_x_ups,fliplr(rt_x_ups)];
        ypatch = [rt_y_ups,zeros(size(rt_y_ups))] + ss;
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facecolor',stage_clrs(ss,:),...
            'facealpha',.25,...
            'linewidth',1.5);
        p(ss) = stairs(sps(mm),...
            rt_x,rt_y + ss,...
            'color',stage_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % legend
    legend(p,[{'early'},repmat({''},1,n_stages-2),{'late'}],...
        'location','northwest',...
        'box','off');
end

%% plot collection-aligned reaction time distributions (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','rt_collection_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',collection_period,...
    'ytick',[],...
    'layer','top',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Reaction time PDF');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        rt_counts = histcounts(-data.rt(reward_flags),rt_edges);
        rt_x = rt_edges(1:end-1);
        rt_y = normalize01(rt_counts,2) * .85;
        rt_x_ups = sort([rt_edges(2:end),rt_edges(2:end)]);
        rt_y_ups = upsample(rt_y,2);
        rt_y_ups(2:2:end-1) = rt_y(2:end);
        xpatch = [rt_x_ups,fliplr(rt_x_ups)];
        ypatch = [rt_y_ups,zeros(size(rt_y_ups))] + ss;
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facecolor',session_clrs(ss,:),...
            'facealpha',.25,...
            'linewidth',1.5);
        stairs(sps(mm),...
            rt_x,rt_y + ss,...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % update axes settings
    set(sps(mm),...
        'ylim',[1,n_sessions+1]+[-1,1]*.05*n_sessions);
end

%% plot collection-aligned reaction time distributions (split by training stage)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','rt_collection_stage',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',collection_period,...
    'ylim',[1,n_stages+1]+[-1,1]*.05*n_stages,...
    'ytick',[],...
    'layer','top',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% graphical object preallocation
p = gobjects(n_stages,1);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Reaction time PDF');
    
    % compute stage boundaries
    n_trials = sum(mouse_flags);
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        rt_counts = histcounts(-data.rt(reward_flags),rt_edges);
        rt_x = rt_edges(1:end-1);
        rt_y = normalize01(rt_counts,2) * .85;
        rt_x_ups = sort([rt_edges(2:end),rt_edges(2:end)]);
        rt_y_ups = upsample(rt_y,2);
        rt_y_ups(2:2:end-1) = rt_y(2:end);
        xpatch = [rt_x_ups,fliplr(rt_x_ups)];
        ypatch = [rt_y_ups,zeros(size(rt_y_ups))] + ss;
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facecolor',stage_clrs(ss,:),...
            'facealpha',.25,...
            'linewidth',1.5);
        p(ss) = stairs(sps(mm),...
            rt_x,rt_y + ss,...
            'color',stage_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % legend
    legend(p,[{'early'},repmat({''},1,n_stages-2),{'late'}],...
        'location','northeast',...
        'box','off');
end

%% reward delivery-aligned DA rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ytick',0:100:2e3,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags;
    if sum(reward_flags) == 0
        continue;
    end
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Reward # (sorted chronologically)');
    
    % plot DA raster
    da_mat = data.da.delivery(reward_flags,:);
    imagesc(sps(mm),da_delivery_time,[],...
        da_mat,quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times,1:n_rewards,5,...
        session_clrs(session_idcs,:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward delivery-aligned DA rasters (sorted by reaction times)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    if sum(reward_flags) == 0
        continue;
    end
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Valid reward # (sorted by reaction time)');
    
    % plot DA raster
    da_mat = data.da.delivery(reward_flags,:);
    sorting_mat = [...
        data.session(reward_flags),...
        data.rt(reward_flags),...
        data.iri.actual(reward_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    imagesc(sps(mm),da_delivery_time,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times(sorted_idcs),1:n_rewards,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward delivery-aligned average DA (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.delivery(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(reward_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_delivery_time(~nan_flags),...
            fliplr(da_delivery_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            da_delivery_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % iterate through sessions
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.delivery(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        
        % plot median reaction time
        rt_med = nanmedian(data.rt(reward_flags));
        idx = find(da_delivery_time >= min(rt_med, max(xlim(sps(mm)))),1);
        if rt_med > max(xlim(sps(mm)))
            marker = '>';
        else
            marker = 'v';
        end
        plot(sps(mm),...
            da_delivery_time(idx),da_mu(idx),...
            'marker',marker,...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % pseudo legend
    xleg = min(xlim(sps(mm)))+.075*range(xlim(sps(mm)));
    yleg = max(ylim(sps(mm)))-.25*range(ylim(sps(mm)));
    plot(sps(mm),...
        xleg,yleg,...
        'color','none',...
        'marker','v',...
        'markersize',7.5,...
        'markeredgecolor','k',...
        'markerfacecolor','w',...
        'linewidth',1.5);
    text(sps(mm),...
        xleg+.05*range(xlim(sps(mm))),yleg,...
        '$\hat{rt}$',...
        'horizontalalignment','left',...
        'interpreter','latex',...
        'fontsize',12);
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward delivery-aligned average DA (split by training stage)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_delivery_stage',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% graphical object preallocation
p = gobjects(n_stages,1);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % compute stage boundaries
    n_trials = sum(mouse_flags);
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.delivery(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(reward_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_delivery_time(~nan_flags),...
            fliplr(da_delivery_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        p(ss) = plot(sps(mm),...
            da_delivery_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',stage_clrs(ss,:),...
            'linewidth',1);
        
    end
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.delivery(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        
        % plot median reaction time
        rt_med = nanmedian(data.rt(reward_flags));
        idx = find(da_delivery_time >= min(rt_med, max(xlim(sps(mm)))),1);
        if rt_med > max(xlim(sps(mm)))
            marker = '>';
        else
            marker = 'v';
        end
        plot(sps(mm),...
            da_delivery_time(idx),da_mu(idx),...
            'marker',marker,...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',stage_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % pseudo legend
    xleg = min(xlim(sps(mm)))+.075*range(xlim(sps(mm)));
    yleg = max(ylim(sps(mm)))-.25*range(ylim(sps(mm)));
    plot(sps(mm),...
        xleg,yleg,...
        'color','none',...
        'marker','v',...
        'markersize',7.5,...
        'markeredgecolor','k',...
        'markerfacecolor','w',...
        'linewidth',1.5);
    text(sps(mm),...
        xleg+.05*range(xlim(sps(mm))),yleg,...
        '$\hat{rt}$',...
        'horizontalalignment','left',...
        'interpreter','latex',...
        'fontsize',12);
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % legend
    legend(p,[{'early'},repmat({''},1,n_stages-2),{'late'}],...
        'location','northeast',...
        'box','off');
end

%% reward collection-aligned DA rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',collection_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    if sum(reward_flags) == 0
        continue;
    end
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Valid reward (sorted chronologically) #');
    
    % plot DA raster
    da_mat = data.da.collection(reward_flags,:);
    imagesc(sps(mm),da_collection_time,[],...
        da_mat,quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = -data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times,1:n_rewards,5,...
        session_clrs(session_idcs,:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward collection-aligned DA rasters (sorted by reaction time)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',collection_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    if sum(reward_flags) == 0
        continue;
    end
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Valid reward (sorted by reaction time) #');
    
    % fetch DA traces
    da_mat = data.da.collection(reward_flags,:);
    
    % fetch lick counts & compute lick rates
    lick_counts = data.lick.collection(reward_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_rates(nan_flags) = nan;
    
    % sort rewards
    %     pca_design = lick_rates(:,lick_roi_time<0)';
    %     pca_design = lick_rates(:,lick_roi_time>=0)';
    %     pca_design = lick_rates';
    pca_design = da_mat';
    pca_design(isnan(pca_design)) = 0;
    coeff = pca(zscore(pca_design));
    [theta,rho] = cart2pol(coeff(:,1),coeff(:,2));
    sorting_mat = [...
        data.session(reward_flags),...
        data.rt(reward_flags),...
        data.iri.actual(reward_flags),...
        theta];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    
    % plot DA raster
    imagesc(sps(mm),da_collection_time,[],...
        da_mat(sorted_idcs,:),quantile(da_mat,[.001,.999],'all')');
    
    % plot reaction times
    reaction_times = -data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times(sorted_idcs),1:n_rewards,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward collection-aligned average DA (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',collection_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.collection(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(reward_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_collection_time(~nan_flags),...
            fliplr(da_collection_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            da_collection_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % iterate through sessions
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.collection(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        
        % plot median reaction time
        rt_med = -nanmedian(data.rt(reward_flags));
        idx = find(da_collection_time >= min(rt_med, max(xlim(sps(mm)))),1);
        if rt_med < min(xlim(sps(mm)))
            marker = '<';
        else
            marker = 'v';
        end
        plot(sps(mm),...
            da_collection_time(idx),da_mu(idx),...
            'marker',marker,...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % pseudo legend
    xleg = min(xlim(sps(mm)))+.075*range(xlim(sps(mm)));
    yleg = max(ylim(sps(mm)))-.25*range(ylim(sps(mm)));
    plot(sps(mm),...
        xleg,yleg,...
        'color','none',...
        'marker','v',...
        'markersize',7.5,...
        'markeredgecolor','k',...
        'markerfacecolor','w',...
        'linewidth',1.5);
    text(sps(mm),...
        xleg+.05*range(xlim(sps(mm))),yleg,...
        '$\hat{rt}$',...
        'horizontalalignment','left',...
        'interpreter','latex',...
        'fontsize',12);
    
    % plot response windows used to compute DA responses
    yylim = ylim(sps(mm));
    yymax = max(yylim) * 1.1;
    patch(sps(mm),...
        [baseline_period,fliplr(baseline_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'w',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    patch(sps(mm),...
        [reward_period,fliplr(reward_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[1,1]*baseline_period(2),ylim(sps(mm)),'-k',...
        'linewidth',1);
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward collection-aligned average DA (split by training stage)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','da_collection_stage',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',collection_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% graphical object preallocation
p = gobjects(n_stages,1);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'DA (\DeltaF/F)');
    
    % compute quantile boundaries
    n_trials = sum(mouse_flags);
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.collection(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        da_std = nanstd(da_mat,0,1);
        da_sem = da_std ./ sqrt(sum(reward_flags));
        nan_flags = isnan(da_mu) | isnan(isnan(da_sem)) | da_sem == 0;
        xpatch = [da_collection_time(~nan_flags),...
            fliplr(da_collection_time(~nan_flags))];
        ypatch = [da_mu(~nan_flags)-da_sem(~nan_flags),...
            fliplr(da_mu(~nan_flags)+da_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        p(ss) = plot(sps(mm),...
            da_collection_time(~nan_flags),da_mu(~nan_flags),'-',...
            'color',stage_clrs(ss,:),...
            'linewidth',1);
    end
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        da_mat = data.da.collection(reward_flags,:);
        da_mu = nanmean(da_mat,1);
        
        % plot median reaction time
        rt_med = -nanmedian(data.rt(reward_flags));
        idx = find(da_collection_time >= min(rt_med, max(xlim(sps(mm)))),1);
        if rt_med < min(xlim(sps(mm)))
            marker = '<';
        else
            marker = 'v';
        end
        plot(sps(mm),...
            da_collection_time(idx),da_mu(idx),...
            'marker',marker,...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',stage_clrs(ss,:),...
            'linewidth',1.5);
    end
    
    % plot response windows used to compute DA responses
    yylim = ylim(sps(mm));
    yymax = max(yylim) * 1.1;
    patch(sps(mm),...
        [baseline_period,fliplr(baseline_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'w',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    patch(sps(mm),...
        [reward_period,fliplr(reward_period)],...
        [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
        'edgecolor','k',...
        'facealpha',1,...
        'linewidth',1.5);
    
    % legend
    legend(p,[{'early'},repmat({''},1,n_stages-2),{'late'}],...
        'location','northwest',...
        'autoupdate','off',...
        'box','off');
    
    % pseudo legend
    xleg = min(xlim(sps(mm)))+.075*range(xlim(sps(mm)));
    yleg = max(ylim(sps(mm)))-.25*range(ylim(sps(mm)));
    plot(sps(mm),...
        xleg,yleg,...
        'color','none',...
        'marker','v',...
        'markersize',7.5,...
        'markeredgecolor','k',...
        'markerfacecolor','w',...
        'linewidth',1.5);
    text(sps(mm),...
        xleg+.05*range(xlim(sps(mm))),yleg,...
        '$\hat{rt}$',...
        'horizontalalignment','left',...
        'interpreter','latex',...
        'fontsize',12);
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    plot(sps(mm),[1,1]*baseline_period(2),ylim(sps(mm)),'-k',...
        'linewidth',1);
end

%% reward delivery-aligned lick rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_delivery_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Valid reward # (sorted chronologically)');
    
    % plot lick raster
    lick_counts = data.lick.delivery(reward_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_rates(nan_flags) = nan;
    imagesc(sps(mm),lick_delivery_time,[],...
        lick_rates,[0,10]);
    
    % plot reaction times
    reaction_times = data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times,1:n_rewards,5,...
        session_clrs(session_idcs,:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward delivery-aligned lick rasters (sorted by reaction time)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_delivery_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',delivery_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Valid reward # (sorted by reaction time)');
    
    % plot lick raster
    lick_counts = data.lick.delivery(reward_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_rates(nan_flags) = nan;
    sorting_mat = [...
        data.session(reward_flags),...
        data.rt(reward_flags),...
        data.iri.actual(reward_flags)];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    imagesc(sps(mm),lick_delivery_time,[],...
        lick_rates(sorted_idcs,:),[0,10]);
    
    % plot reaction times
    reaction_times = data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times(sorted_idcs),1:n_rewards,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward delivery-aligned lick rate (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_delivery_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Lick rate (Hz)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        
        % fetch relevant events & ensure no overlaps
        lick_counts = data.lick.delivery(reward_flags,:);
        nan_flags = isnan(lick_counts);
        lick_counts(nan_flags) = 0;
        lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
        lick_rates(nan_flags) = nan;
        lick_mu = nanmean(lick_rates,1);
        lick_std = nanstd(lick_rates,0,1);
        lick_sem = lick_std ./ sqrt(sum(~isnan(lick_rates)));
        nan_flags = isnan(lick_mu) | isnan(isnan(lick_sem)) | lick_sem == 0;
        xpatch = [lick_collection_time(~nan_flags),...
            fliplr(lick_collection_time(~nan_flags))];
        ypatch = [lick_mu(~nan_flags)-lick_sem(~nan_flags),...
            fliplr(lick_mu(~nan_flags)+lick_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            lick_collection_time(~nan_flags),lick_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward delivery-aligned lick rate (split by training stage)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_delivery_stage',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% graphical object preallocation
p = gobjects(n_stages,1);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward delivery (s)');
    ylabel(sps(mm),'Lick rate (Hz)');
    
    % compute quantile boundaries
    n_trials = sum(mouse_flags);
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        
        % fetch relevant events & ensure no overlaps
        lick_counts = data.lick.delivery(reward_flags,:);
        nan_flags = isnan(lick_counts);
        lick_counts(nan_flags) = 0;
        lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
        lick_rates(nan_flags) = nan;
        lick_mu = nanmean(lick_rates,1);
        lick_std = nanstd(lick_rates,0,1);
        lick_sem = lick_std ./ sqrt(sum(~isnan(lick_rates)));
        nan_flags = isnan(lick_mu) | isnan(isnan(lick_sem)) | lick_sem == 0;
        xpatch = [lick_collection_time(~nan_flags),...
            fliplr(lick_collection_time(~nan_flags))];
        ypatch = [lick_mu(~nan_flags)-lick_sem(~nan_flags),...
            fliplr(lick_mu(~nan_flags)+lick_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        p(ss) = plot(sps(mm),...
            lick_collection_time(~nan_flags),lick_mu(~nan_flags),'-',...
            'color',stage_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % legend
    legend(p,[{'early'},repmat({''},1,n_stages-2),{'late'}],...
        'box','off');
end


%% reward collection-aligned lick rasters (sorted chronologically)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_collection_rasters_chronological',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'xlim',collection_period,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Valid reward # (sorted chronologically)');
    
    % plot lick raster
    lick_counts = data.lick.collection(reward_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_rates(nan_flags) = nan;
    sorting_mat = [data.rt(reward_flags),data.session(reward_flags)];
    imagesc(sps(mm),lick_collection_time,[],...
        lick_rates,[0,10]);
    
    % plot reaction times
    reaction_times = -data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times,1:n_rewards,5,...
        session_clrs(session_idcs,:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward collection-aligned lick rasters (sorted by reaction time)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_collection_rasters_reaction',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(ceil(n_mice/4),ceil(n_mice/2),ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'colormap',bone(2^8-1),...
    'linewidth',2,...
    'fontsize',12,...
    'layer','top',...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    reward_flags = ...
        mouse_flags & ...
        valid_flags;
    n_rewards = sum(reward_flags);
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    
    % axes labels
    title(sps(mm),sprintf('%s',mouse_ids{mm}),...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Valid reward # (sorted by reaction time)');
    
    % fetch DA traces
    da_mat = data.da.collection(reward_flags,:);
    
    % fetch lick counts & compute lick rates
    lick_counts = data.lick.collection(reward_flags,:);
    nan_flags = isnan(lick_counts);
    lick_counts(nan_flags) = 0;
    lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
    lick_rates(nan_flags) = nan;
    
    % sort rewards
    pca_design = lick_rates(:,lick_collection_time<0)';
    %     pca_design = lick_rates(:,lick_roi_time>=0)';
    %     pca_design = lick_rates';
    %     pca_design = da_mat';
    pca_design(isnan(pca_design)) = 0;
    coeff = pca(zscore(pca_design));
    [theta,rho] = cart2pol(coeff(:,1),coeff(:,2));
    sorting_mat = [...
        data.session(reward_flags),...
        data.rt(reward_flags),...
        data.iri.actual(reward_flags),...
        theta];
    [~,sorted_idcs] = sortrows(sorting_mat,[1,2]);
    
    % plot lick raster
    imagesc(sps(mm),lick_collection_time,[],...
        lick_rates(sorted_idcs,:),[0,10]);
    
    % plot reaction times
    reaction_times = -data.rt(reward_flags);
    session_idcs = data.session(reward_flags);
    scatter(sps(mm),...
        reaction_times(sorted_idcs),1:n_rewards,5,...
        session_clrs(session_idcs(sorted_idcs),:),...
        'marker','.');
    
    % iterate through sessions
    counter = 0;
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        prev_counter = counter;
        counter = counter + sum(reward_flags);
        
        % plot session delimeters
        plot(sps(mm),xlim(sps(mm)),...
            [1,1]*(counter+.5),...
            'color',[1,1,1]);
        plot(sps(mm),[1,1]*min(xlim(sps(mm)))+.015*range(xlim(sps(mm))),...
            [prev_counter,counter]+.5,...
            'color',session_clrs(ss,:),...
            'linewidth',5);
    end
    
    % plot reference lines
    plot(sps(mm),[0,0],ylim(sps(mm)),'--w');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward collection-aligned lick rate (split by session)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_collection_session',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Lick rate (Hz)');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        
        % fetch relevant events & ensure no overlaps
        lick_counts = data.lick.collection(reward_flags,:);
        nan_flags = isnan(lick_counts);
        lick_counts(nan_flags) = 0;
        lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
        lick_rates(nan_flags) = nan;
        lick_mu = nanmean(lick_rates,1);
        lick_std = nanstd(lick_rates,0,1);
        lick_sem = lick_std ./ sqrt(sum(~isnan(lick_rates)));
        nan_flags = isnan(lick_mu) | isnan(isnan(lick_sem)) | lick_sem == 0;
        xpatch = [lick_collection_time(~nan_flags),...
            fliplr(lick_collection_time(~nan_flags))];
        ypatch = [lick_mu(~nan_flags)-lick_sem(~nan_flags),...
            fliplr(lick_mu(~nan_flags)+lick_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,session_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        plot(sps(mm),...
            lick_collection_time(~nan_flags),lick_mu(~nan_flags),'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% reward collection-aligned lick rate (split by training stage)

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','licks_collection_stage',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',lick_period-lickrate_kernel.paddx,...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% graphical object preallocation
p = gobjects(n_stages,1);

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Time since reward collection (s)');
    ylabel(sps(mm),'Lick rate (Hz)');
    
    % compute quantile boundaries
    n_trials = sum(mouse_flags);
    stage_boundaries = floor(linspace(0,n_trials,n_stages+1));
    
    % iterate through stages
    for ss = 1 : n_stages
        stage_flags = ...
            data.reward.index.mouse > stage_boundaries(ss) & ...
            data.reward.index.mouse <= stage_boundaries(ss+1);
        reward_flags = ...
            mouse_flags & ...
            stage_flags & ...
            valid_flags;
        if sum(reward_flags) == 0
            continue;
        end
        
        % fetch relevant events & ensure no overlaps
        lick_counts = data.lick.collection(reward_flags,:);
        nan_flags = isnan(lick_counts);
        lick_counts(nan_flags) = 0;
        lick_rates = conv2(1,lickrate_kernel.pdf,lick_counts,'same') / dt;
        lick_rates(nan_flags) = nan;
        lick_mu = nanmean(lick_rates,1);
        lick_std = nanstd(lick_rates,0,1);
        lick_sem = lick_std ./ sqrt(sum(~isnan(lick_rates)));
        nan_flags = isnan(lick_mu) | isnan(isnan(lick_sem)) | lick_sem == 0;
        xpatch = [lick_collection_time(~nan_flags),...
            fliplr(lick_collection_time(~nan_flags))];
        ypatch = [lick_mu(~nan_flags)-lick_sem(~nan_flags),...
            fliplr(lick_mu(~nan_flags)+lick_sem(~nan_flags))];
        patch(sps(mm),...
            xpatch,ypatch,stage_clrs(ss,:),...
            'edgecolor','none',...
            'facealpha',.25);
        p(ss) = plot(sps(mm),...
            lick_collection_time(~nan_flags),lick_mu(~nan_flags),'-',...
            'color',stage_clrs(ss,:),...
            'linewidth',1);
    end
    
    % plot zero line
    plot(sps(mm),[0,0],ylim(sps(mm)),'--k');
    
    % legend
    legend(p,[{'early'},repmat({''},1,n_stages-2),{'late'}],...
        'box','off');
end


%% plot test 1

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name','test_1',...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlimspec','tight',...
    'xtick',0:100:max(data.reward.index.mouse),...
    'ylimspec','tight',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),'Reward #');
    ylabel(sps(mm),'DA response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(reward_flags) == 0
            continue;
        end
        x = data.reward.index.mouse(reward_flags & valid_flags);
        X = [ones(size(x)),x];
        y = data.da.response(reward_flags & valid_flags);
        betas = robustfit(x,y);
        plot(sps(mm),...
            data.reward.index.mouse(reward_flags),...
            data.da.response(reward_flags),'.',...
            'markersize',10,...
            'color',[1,1,1]*.85);
        plot(sps(mm),...
            x,y,'.',...
            'markersize',15,...
            'color',session_clrs(ss,:));
        plot(sps(mm),...
            x,X*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x,X*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    reward_flags = ...
        mouse_flags;
    x = data.reward.index.mouse(reward_flags & valid_flags);
    X = [ones(size(x)),x];
    y = data.da.response(reward_flags & valid_flags);
    nan_flags = isnan(y);
    betas = robustfit(x,y);
    plot(sps(mm),...
        x,X*betas,'--k',...
        'linewidth',1);
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end

%% plot test 2

% IRI type selection
iri_type = 'nominal';
% iri_type = 'actual';

% figure initialization
figure(...
    'windowstyle','docked',...
    'numbertitle','off',...
    'name',sprintf('test_2_%s',iri_type),...
    'color','w');

% axes initialization
sps = gobjects(n_mice,1);
for ii = 1 : n_mice
    sps(ii) = subplot(n_mice/4,n_mice/2,ii);
end
set(sps,...
    'xlim',[0,60],...
    'xtick',0:100:max(data.reward.index.mouse),...
    'ylimspec','tight',...
    'xscale','linear',...
    'nextplot','add',...
    'linewidth',2,...
    'fontsize',12,...
    'tickdir','out');

% iterate through mice
for mm = 1 : n_mice
    mouse_flags = data.mouse == mouse_ids{mm};
    
    % axes labels
    title(sps(mm),mouse_ids{mm},...
        'interpreter','none');
    xlabel(sps(mm),sprintf('Previous %s IRI (s)',iri_type));
    ylabel(sps(mm),'DA response');
    
    % iterate through sessions
    n_sessions = max(data.session(mouse_flags));
    session_clrs = cool(n_sessions);
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        reward_flags = ...
            mouse_flags & ...
            session_flags;
        if sum(reward_flags) == 0
            continue;
        end
        x = data.iri.(iri_type)(reward_flags & valid_flags);
        X = [ones(size(x)),x];
        y = data.da.response(reward_flags & valid_flags);
        betas = robustfit(x,y);
        scatter(sps(mm),...
            data.iri.(iri_type)(reward_flags),...
            data.da.response(reward_flags),15,...
            'markerfacecolor',[1,1,1]*.75,...
            'markeredgecolor','none',...
            'markerfacealpha',.25);
        scatter(sps(mm),...
            x,y,25,...
            'markerfacecolor',session_clrs(ss,:),...
            'markeredgecolor','none',...
            'markerfacealpha',.25);
        [~,idcs] = sort(x);
        plot(sps(mm),...
            x(idcs),X(idcs,:)*betas,'-w',...
            'linewidth',3);
        plot(sps(mm),...
            x(idcs),X(idcs,:)*betas,'-',...
            'color',session_clrs(ss,:),...
            'linewidth',1.5);
    end
    reward_flags = ...
        mouse_flags;
    x = data.iri.(iri_type)(reward_flags & valid_flags);
    X = [ones(size(x)),x];
    y = data.da.response(reward_flags & valid_flags);
    betas = robustfit(x,y);
    [~,idcs] = sort(x);
    plot(sps(mm),...
        x(idcs),X(idcs,:)*betas,'--k',...
        'linewidth',1);
end

% save figure
if want2save
    png_file = fullfile(save_path,[get(gcf,'name'),'.png']);
    print(gcf,png_file,'-dpng','-r300','-painters');
end