%% experiment VII: sequential conditioning
% description goes here

%% initialization
Jeong2022_preface;

%% used fixed random seed
rng(0);

%% key assumptions
use_clicks = 0;
use_cs_offset = 0;

%% experiment parameters
pre_cs1_delay = 1.5;
cs1_dur = 1;
cs2_dur = 1;
cs1cs2_interval = .5;
trace_dur = .5;
iti_delay = 0;
iti_mu = 60;
iti_max = 180;

%% analysis parameters
baseline_period = [-1,0];
cs1_period = [0,1];
cs2_period = cs1_period + cs1_dur + cs1cs2_interval;
us_period = cs2_period + cs2_dur + trace_dur;

%% simulation parameters
n_trials = 500;
trial_idcs = 1 : n_trials;

%% trial time
trial_dur = pre_cs1_delay + cs1_dur + cs1cs2_interval + ...
    cs2_dur + trace_dur + iti_delay;
max_trial_dur = max(trial_dur) + iti_max;
trial_time = (0 : dt : max_trial_dur - dt) - pre_cs1_delay;
n_states_per_trial = numel(trial_time);
trial_state_edges = linspace(0,max_trial_dur,n_states_per_trial+1);

%% inter-trial-intervals
iti_pd = truncate(makedist('exponential','mu',iti_mu),0,iti_max);
iti = random(iti_pd,n_trials,1);
iti = dt * round(iti / dt);

%% inter-trial-onset-intervals
itoi = trial_dur + iti;

%% trial onset times
trial_onset_times = cumsum(itoi);
trial_onset_times = dt * round(trial_onset_times / dt);

%% simulation time
dur = trial_onset_times(end) + max_trial_dur;
time = 0 : dt : dur - dt;
n_states = numel(time);
state_edges = linspace(0,dur,n_states+1);

%% CS1 onset times
cs1_onset_times = trial_onset_times + pre_cs1_delay;
cs1_onset_counts = histcounts(cs1_onset_times,state_edges);

%% CS1 offset times
cs1_offset_times = cs1_onset_times + cs1_dur;
cs1_offset_counts = histcounts(cs1_offset_times,state_edges);

%% CS2 onset times
cs2_onset_times = cs1_offset_times + cs1cs2_interval;
cs2_onset_counts = histcounts(cs2_onset_times,state_edges);

%% CS2 offset times
cs2_offset_times = cs2_onset_times + cs2_dur;
cs2_offset_counts = histcounts(cs2_offset_times,state_edges);

%% CS flags
cs1_ison = sum(...
    time >= cs1_onset_times & ...
    time <= cs1_offset_times,1)';
cs2_ison = sum(...
    time >= cs2_onset_times & ...
    time <= cs2_offset_times,1)';

%% click times
click_trial_times = trial_dur - iti_delay;
click_times = click_trial_times + trial_onset_times;
click_times = dt * round(click_times / dt);
click_counts = histcounts(click_times,state_edges);
n_clicks = sum(click_counts);

%% reaction times
reaction_times = repmat(.5,n_trials,1);
% reaction_times = linspace(1,.1,n_trials)';
reaction_times = max(reaction_times,dt*2);
if ~use_clicks
    reaction_times = 0;
end

%% reward times
reward_times = click_times + reaction_times;
reward_times = dt * round(reward_times / dt);
reward_counts = histcounts(reward_times,state_edges);
n_rewards = sum(reward_counts);
reward_idcs = (1 : n_rewards)';

%% microstimuli
stimulus_trace = stimulustracefun(y0,tau,time)';
mus = linspace(1,0,n);
microstimuli = microstimulusfun(stimulus_trace,mus,sigma);

%% UNCOMMENT TO REPLACE MICROSTIMULI WITH COMPLETE SERIAL COMPOUND
% csc = zeros(n_states,n);
% pulse_duration = .5;
% pulse_length = floor(pulse_duration / dt);
% for ii = 1 : n
%     idcs = (1 : pulse_length) + (ii - 1) * pulse_length;
%     csc(idcs,ii) = 1;
% end
% microstimuli = csc;
% microstimuli = microstimuli / max(sum(microstimuli,2));

%% concatenate all stimulus times
stimulus_times = {...
    reward_times,...
    cs1_onset_times,...
    cs2_onset_times};
if use_clicks
    stimulus_times = [...
        stimulus_times,...
        click_times];
end
if use_cs_offset
    stimulus_times = [...
        stimulus_times,...
        cs1_offset_times,...
        cs2_offset_times];
end

%% concatenate all state flags
cs_flags = [...
    cs1_ison,...
    cs2_ison];

%% TD learning
[state,value,rpe,exp7_weights] = tdlambda(...
    time,[],stimulus_times,reward_times,microstimuli,[],...
    'alpha',alpha,...
    'gamma',gamma,...
    'lambda',lambda);

%% compute 'DA signal'
padded_rpe = padarray(rpe,dlight_kernel.nbins/2,0);
da = conv(padded_rpe(1:end-1),dlight_kernel.pdf,'valid');

%% get CS- & US-aligned snippets of DA signal
[da_baseline_snippets,da_baseline_time] = signal2eventsnippets(...
    time,da,cs1_onset_times,baseline_period,dt);
[da_cs1_snippets,da_cs1_time] = signal2eventsnippets(...
    time,da,cs1_onset_times,cs1_period,dt);
[da_cs2_snippets,da_cs2_time] = signal2eventsnippets(...
    time,da,cs1_onset_times,cs2_period,dt);
[da_us_snippets,da_us_time] = signal2eventsnippets(...
    time,da,reward_times,us_period,dt);

%% compute 'DA response' metrics

% preallocation
da_cs1_response = nan(n_rewards,1);
da_cs2_response = nan(n_rewards,1);

% iterate through rewards
for ii = 1 : n_rewards
    da_cs1_response(ii) = ...
        sum(da_cs1_snippets(ii,:)) - sum(da_baseline_snippets(ii,:));
    da_cs2_response(ii) = ...
        sum(da_cs2_snippets(ii,:)) - sum(da_baseline_snippets(ii,:));
end

%% reshape from trial-less time series to STATES x TRIALS matrices

% preallocation
stimulus_matrix = nan(n_states_per_trial,n_trials);
value_matrix = nan(n_states_per_trial,n_trials);
rpe_matrix = nan(n_states_per_trial,n_trials);
da_matrix = nan(n_states_per_trial,n_trials);

% iterate through trials
for ii = 1 : n_trials
    onset_idx = find(time >= trial_onset_times(ii),1);
    if ii < n_trials
        offset_idx = find(time >= trial_onset_times(ii+1),1);
    else
        offset_idx = find(time >= trial_onset_times(ii) + trial_dur,1);
    end
    idcs = onset_idx : offset_idx - 1;
    n_idcs = numel(idcs);
    stimulus_matrix(1:n_idcs,ii) = ...
        cs1_onset_counts(idcs) + ...
        cs2_onset_counts(idcs) + ...
        cs1_offset_counts(idcs) * use_cs_offset + ...
        cs2_offset_counts(idcs) * use_cs_offset + ...
        click_counts(idcs) * use_clicks + ...
        reward_counts(idcs);
    value_matrix(1:n_idcs,ii) = value(idcs);
    rpe_matrix(1:n_idcs,ii) = rpe(idcs);
    da_matrix(1:n_idcs,ii) = da(idcs);
end

%% compute reward rate
rwdrate = conv(reward_counts/dt,rwdrate_kernel.pdf,'same');
rwdrate = rwdrate * 60;

%% figure 8: experiment VII

% figure initialization
figure(figopt,...
    'name','experiment VII: tests 10 & 11');

% axes initialization
n_rows = 4;
n_cols = 6;
sp_da_mu = subplot(n_rows,n_cols,[1,2]+n_cols*0);
sp_da = subplot(n_rows,n_cols,[1,2]+n_cols*1);
sp_value_mu = subplot(n_rows,n_cols,[1,2]+n_cols*2);
sp_value = subplot(n_rows,n_cols,[1,2]+n_cols*3);
sp_state = subplot(n_rows,n_cols,[3,4]+n_cols*0);
sp_iti = subplot(n_rows,n_cols,[5,6]+n_cols*0);
sp_baseline = subplot(n_rows,n_cols,3+n_cols*1);
sp_cs1 = subplot(n_rows,n_cols,4+n_cols*1);
sp_cs2 = subplot(n_rows,n_cols,5+n_cols*1);
sp_us = subplot(n_rows,n_cols,6+n_cols*1);
sp_csresponse = subplot(n_rows,n_cols,[3,4]+n_cols*2);
sp_usresponse = subplot(n_rows,n_cols,[3,4]+n_cols*3);
sp_test10 = subplot(n_rows,n_cols,reshape([5,6]+n_cols.*[2;3],4,1));

% concatenate axes
sps = [...
    sp_da_mu;...
    sp_da;...
    sp_value_mu;...
    sp_value;...
    sp_state;...
    sp_iti;...
    sp_baseline;...
    sp_cs1;...
    sp_cs2;...
    sp_us;...
    sp_csresponse;...
    sp_usresponse;...
    sp_test10;...
    ];

% axes settings
arrayfun(@(ax)set(ax.XAxis,'exponent',0),sps);
set(sps,axesopt);
set([sp_da_mu,sp_da,sp_value_mu,sp_value],...
    'xlim',[-pre_cs1_delay,max(trial_dur)+iti_delay]);
set(sp_iti,...
    'xlim',[0,200]);
set(sp_usresponse,...
    'xlim',[1,n_rewards]);
set(sp_test10,...
    'xlim',[0,1],...
    'ylim',[0,1]);

% axes titles
title(sp_test10,'Test X');

% axes labels
arrayfun(@(ax)xlabel(ax,'Time (s)'),[sp_da_mu;sp_da;sp_value_mu;sp_value]);
ylabel(sp_da_mu,'DA (a.u.)');
ylabel(sp_da,'Trial #');
xlabel(sp_us,'Time (s)');
ylabel(sp_value_mu,'Value (a.u.)');
ylabel(sp_value,'Trial #');
xlabel(sp_state,'Time (s)');
ylabel(sp_state,'State feature #');
xlabel(sp_iti,'ITI (s)');
ylabel(sp_iti,'PDF');
xlabel(sp_baseline,'Time since CS1 (s)');
ylabel(sp_baseline,'DA (a.u.)');
xlabel(sp_cs1,'Time since CS1 (s)');
ylabel(sp_cs1,'DA (a.u.)');
xlabel(sp_cs2,'Time since CS2 (s)');
ylabel(sp_cs2,'DA (a.u.)');
xlabel(sp_us,'Time since US (s)');
ylabel(sp_us,'DA (a.u.)');
xlabel(sp_csresponse,'Trial #');
ylabel(sp_csresponse,'DA response at CS');
xlabel(sp_usresponse,'Trial #');
ylabel(sp_usresponse,'DA response at US');
xlabel(sp_test10,'Normalized trial');
ylabel(sp_test10,'Normalized cumulative DA response at CS');

% plot state features
n_trials2plot = 15;
time_flags = ...
    time >= trial_onset_times(1) & ...
    time < trial_onset_times(n_trials2plot + 1);
imagesc(sp_state,...
    time(time_flags)+dt/2,[],state(time_flags,:)');

% plot DA trace
clim = quantile(da_matrix,[0,1],'all')';
imagesc(sp_da,...
    [trial_time(1),trial_time(end)],[1,n_trials],da_matrix',clim);

% plot value trace
clim = quantile(value_matrix,[0,1],'all')';
imagesc(sp_value,...
    [trial_time(1),trial_time(end)],[1,n_trials],...
    value_matrix(:,trial_flags)',clim);

% compute & plot average DA conditioned on CS
da_mu = nanmean(da_matrix,2);
plot(sp_da_mu,trial_time,da_mu,...
    'color','k',...
    'linewidth',1);

% compute & plot average value conditioned on CS
value_mu = nanmean(value_matrix(:,trial_flags),2);
plot(sp_value_mu,trial_time,value_mu,...
    'color','k',...
    'linewidth',1);

% plot response windows used to compute DA responses
yylim = ylim(sp_da_mu);
yymax = max(yylim) * 1.1;
patch(sp_da_mu,...
    [baseline_period,fliplr(baseline_period)],...
    [-1,-1,1,1]*range(yylim)*.02+yymax,'w',...
    'edgecolor','k',...
    'facealpha',1,...
    'linewidth',1);
patch(sp_da_mu,...
    [cs1_period,fliplr(cs1_period)],...
    [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
    'edgecolor','k',...
    'facealpha',1,...
    'linewidth',1);
patch(sp_da_mu,...
    [cs2_period,fliplr(cs2_period)],...
    [-1,-1,1,1]*range(yylim)*.02+yymax,'k',...
    'edgecolor','k',...
    'facealpha',1,...
    'linewidth',1);
text(sp_da_mu,...
    mean(baseline_period),yymax*1.05,'bsl.',...
    'color','k',...
    'horizontalalignment','center',...
    'verticalalignment','bottom');
text(sp_da_mu,...
    mean(cs1_period),yymax*1.05,'CS',...
    'color','k',...
    'horizontalalignment','center',...
    'verticalalignment','bottom');
text(sp_da_mu,...
    mean(cs2_period),yymax*1.05,'US',...
    'color','k',...
    'horizontalalignment','center',...
    'verticalalignment','bottom');

% legend
legend(sp_da_mu,...
    {'w/o background','w/ background'},...
    'location','northeast',...
    'box','off',...
    'autoupdate','off');

% plot IRI distribution for background rewards
stem(sp_iti,bg_iri_mu,max([bg_iri_counts,bg_iri_pdf]),...
    'color','k',...
    'marker','v',...
    'markersize',10,...
    'markerfacecolor','k',...
    'markeredgecolor','none',...
    'linewidth',2);
histogram(sp_iti,...
    'binedges',bg_iri_edges,...
    'bincounts',bg_iri_counts,...
    'facecolor','w',...
    'edgecolor','k',...
    'facealpha',1,...
    'linewidth',1);
plot(sp_iti,bg_iri_edges,bg_iri_pdf,...
    'color','k',...
    'linewidth',2);

% plot overall reward rate
plot(sp_us,...
    time,rwdrate,...
    'color','k',...
    'linewidth',1);
plot(sp_us,...
    [1,1]*bg_reward_times(1),ylim(sp_us),'--k');

% plot DA response at original US time
exp_start_idx = find(trial_idcs(cs_flags) > bg_reward_start_idx,1);
plot(sp_usresponse,...
    reward_idcs,da_cs2_response,...
    'color','k',...
    'linewidth',1.5);
plot(sp_usresponse,...
    [1,1]*exp_start_idx,ylim(sp_usresponse),'--k');
plot(sp_usresponse,...
    [0,n_rewards],[0,0],'--k');

% test 7: DA CS responses as a function of trial number
plot(sp_test10,...
    (1:n_rewards)./n_rewards,cumsum(da_cs1_response)/sum(da_cs1_response),...
    'color','k',...
    'linewidth',1.5);
plot(sp_test10,...
    [1,1]*exp_start_idx./n_rewards,ylim(sp_test10),'--k');
plot(sp_test10,...
    [0,1],[0,1],'--k');
text(sp_test10,.25,.75,'decreases',...
    'color',[1,1,1]*.75,...
    'horizontalalignment','center',...
    'units','normalized');
text(sp_test10,.75,.25,'increases',...
    'color',[1,1,1]*.75,...
    'horizontalalignment','center',...
    'units','normalized');

% test 5: DA US responses as a function of trial number
exp_flags = reward_idcs >= exp_start_idx;
plot(sp_test5,...
    (exp_start_idx:n_cs_plus)-exp_start_idx,...
    cumsum(da_cs2_response(exp_flags)),...
    'color','k',...
    'linewidth',1.5);
plot(sp_test5,...
    [1,1]*exp_start_idx,ylim(sp_test5),'--k');
plot(sp_test5,...
    [0,n_cs_plus],[0,0],'--k');

% plot CS onset
plot(sp_da_mu,[0,0],ylim(sp_da_mu),...
    'color','k',...
    'linestyle','--',...
    'linewidth',1);
plot(sp_value_mu,[0,0],ylim(sp_value_mu),...
    'color','k',...
    'linestyle','--',...
    'linewidth',1);

% iterate through CS durations
for ii = 1 : n_cs_durs
    
    % plot CS offset
    if use_cs_offset
        plot(sp_da_mu,[0,0]+cs_dur(ii),ylim(sp_da_mu),...
            'color','k',...
            'linestyle','--',...
            'linewidth',1);
        plot(sp_value_mu,[0,0]+cs_dur(ii),ylim(sp_value_mu),...
            'color','k',...
            'linestyle','--',...
            'linewidth',1);
    end
    
    % plot offset of the trace period
    plot(sp_da_mu,[0,0]+cs_dur(ii)+trace_dur,ylim(sp_da_mu),...
        'color','k',...
        'linestyle','--',...
        'linewidth',1);
    plot(sp_value_mu,[0,0]+cs_dur(ii)+trace_dur,ylim(sp_value_mu),...
        'color','k',...
        'linestyle','--',...
        'linewidth',1);
end

% axes linkage
arrayfun(@(ax1,ax2,ax3,ax4)linkaxes([ax1,ax2,ax3,ax4],'x'),...
    sp_da_mu,sp_da,sp_value_mu,sp_value);

% annotate model parameters
annotateModelParameters;