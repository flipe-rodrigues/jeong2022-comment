%% initialization
close all;
clc;

%% preface
Jeong2022_dataPreface;

%% axes options
Jeong2022_setAxesOptions;

%% load data
data_file = fullfile(experiments_path,'randomrewards.mat');
load(data_file);

%% selection criteria
iri_cutoff = 3;
rt_cutoffs = [0,10];

%% reward selection criteria
iri_nominal_flags = ...
    data.iri.nominal >= iri_cutoff & ...
    [data.iri.nominal(2:end); nan] >= iri_cutoff;
iri_actual_flags = ...
    data.iri.actual >= iri_cutoff & ...
    [data.iri.actual(2:end); nan] >= iri_cutoff;
iri_flags = ...
    iri_nominal_flags & ...
    iri_actual_flags;
rt_flags = ...
    data.rt >= rt_cutoffs(1) & ...
    data.rt <= rt_cutoffs(2);
nan_flags = ...
    all(isnan(data.da.delivery),2) | ...
    all(isnan(data.da.collection),2);
valid_flags = ...
    rt_flags & ...
    iri_flags & ...
    ~nan_flags;

%% reaction time distributions
close all;
plotreactiontimes(data(valid_flags,:),meta,...
    'alignment','delivery',...
    'xlim',[0,1]*3,...
    'xlabel','Collection delay (s)',...
    'savepath',panel_path);

%% contingency between reward delivery & collection across sessions

% figure initialization
figure(...
    'numbertitle','off',...
    'name','rt_entropy',...
    'color','w');

% axes initialization
axes(defaultaxesoptions,...
    'xtick',1:max(data.session));

% axes labels
xlabel('Session #');
ylabel('Contingency (reward delivery & collection)');

%
entropyfun = @(p) -nansum(p .* log2(p));

%
mouse_clrs = gray(meta.mice.n+1);
    
% reaction time bin settings
rt_binwidth = 1 / 1;

% iterate through mice
for mm = 1 : meta.mice.n
    mouse_flags = data.mouse == meta.mice.ids{mm};
    
    % parse session data
    n_sessions = max(data.session(mouse_flags));
    
    % preallocation
    h = nan(n_sessions,1);
    
    % iterate through sessions
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;

        % compute basal entropy
        iri_pdf = histcounts(data.iri.actual(trial_flags),...
            'binwidth',rt_binwidth,...
            'normalization','pdf');
        iri_pdf(iri_pdf == 0) = nan;
        hb = entropyfun(iri_pdf);

        % compute residual entropy
        rt_pdf = histcounts(data.rt(trial_flags),...
            'binwidth',rt_binwidth,...
            'normalization','pdf');
        rt_pdf(rt_pdf == 0) = nan;
        hr = entropyfun(rt_pdf);
        
%         figure; hold on;
%         plot(iri_pdf)
%         plot(rt_pdf);
        
        % compute contingency
        c = (hb - hr) / hb;
        
        % compute entropy
        h(ss) = c; %entropyfun(rt_pdf);
    end
    
    % plot entropy across sessions
    plot(1:n_sessions,h,...
        'color',mouse_clrs(mm,:),...
        'marker','o',...
        'markersize',7.5,...
        'markeredgecolor',mouse_clrs(mm,:),...
        'markerfacecolor','w',...
        'linewidth',1.5);
end

% adjust axes limits
xlim(xlim + [-1,1] * .05 * range(xlim));
ylim(ylim + [-1,1] * .05 * range(ylim));

%% contingency between licks & reward collection across sessions

% figure initialization
figure(...
    'numbertitle','off',...
    'name','rt_entropy',...
    'color','w');

% axes initialization
axes(defaultaxesoptions,...
    'xtick',1:max(data.session));

% axes labels
xlabel('Session #');
ylabel('Contingency (reward delivery & collection)');

%
entropyfun = @(p) -nansum(p .* log2(p));

%
mouse_clrs = gray(meta.mice.n+1);

%
edges = linspace(0,60,30);

% iterate through mice
for mm = 1 : meta.mice.n
    mouse_flags = data.mouse == meta.mice.ids{mm};
    
    % parse session data
    n_sessions = max(data.session(mouse_flags));
    
    % preallocation
    h = nan(n_sessions,1);
    
    % iterate through sessions
    for ss = 1 : n_sessions
        session_flags = data.session == ss;
        trial_flags = ...
            mouse_flags & ...
            session_flags & ...
            valid_flags;

        % compute basal entropy
        tri = vertcat(data.contingency.tri{trial_flags});
        tri_pdf = histcounts(tri,edges,...
            'normalization','pdf');
        tri_pdf(tri_pdf == 0) = nan;
        hb = entropyfun(tri_pdf);
        
        % compute residual entropy
        lri = vertcat(data.contingency.lri{trial_flags});
        lri_pdf = histcounts(lri,edges,...
            'normalization','pdf');
        lri_pdf(lri_pdf == 0) = nan;
        hr = entropyfun(lri_pdf);
        
%         figure;
%         hold on;
%         stairs(edges(1:end-1),lri_pdf);
%         stairs(edges(1:end-1),tri_pdf);
        
        % compute contingency
        c = (hb - hr) / hb;
        
        % compute entropy
        h(ss) = c; %entropyfun(rt_pdf);
    end
    
    % plot entropy across sessions
    plot(1:n_sessions,h,...
        'color',mouse_clrs(mm,:),...
        'marker','o',...
        'markersize',7.5,...
        'markeredgecolor',mouse_clrs(mm,:),...
        'markerfacecolor','w',...
        'linewidth',1.5);
    pause(1)
end

% adjust axes limits
xlim(xlim + [-1,1] * .05 * range(xlim));
ylim(ylim + [-1,1] * .05 * range(ylim));
    return;
%% reward delivery-aligned DA 

% rasters (sorted chronologically)
plotdopaminerasters(data,meta,...
    'alignment','delivery',...
    'sorting',{'session'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward delivery (s)',...
    'ylabel','Reward # (sorted chronologically)',...
    'savepath',panel_path);

% rasters (sorted by reaction time)
plotdopaminerasters(data(valid_flags,:),meta,...
    'alignment','delivery',...
    'sorting',{'session','rt'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward delivery (s)',...
    'ylabel','Valid reward # (sorted by reaction time)',...
    'savepath',panel_path);

% session averages
plotdopamineaverages_v2(data,meta,...
    'alignment','delivery',...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward delivery (s)',...
    'savepath',panel_path);

% missing reaction times in
% aveareges!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

%% reward collection-aligned DA

% rasters (sorted chronologically)
plotdopaminerasters(data,meta,...
    'alignment','collection',...
    'sorting',{'session'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'ylabel','Reward # (sorted chronologically)',...
    'savepath',panel_path);

% rasters (sorted by reaction time)
plotdopaminerasters(data(valid_flags,:),meta,...
    'alignment','collection',...
    'sorting',{'session','rt'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'ylabel','Valid reward # (sorted by reaction time)',...
    'savepath',panel_path);

% session averages
plotdopamineaverages_v2(data(valid_flags,:),meta,...
    'alignment','collection',...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'savepath',panel_path);
    
%% session averages (reaction time quantiles)
close all;
plotdopamineaverages_rt_quantiles(data(valid_flags,:),meta,...
    'alignment','collection',...
    'nquantiles',5,...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'savepath',panel_path);

%% reward delivery-aligned licks 

% rasters (sorted chronologically)
plotlickrasters(data(valid_flags,:),meta,...
    'alignment','delivery',...
    'sorting',{'session'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward delivery (s)',...
    'ylabel','Valid reward # (sorted chronologically)',...
    'savepath',panel_path);

% rasters (sorted by reaction time)
plotlickrasters(data(valid_flags,:),meta,...
    'alignment','delivery',...
    'sorting',{'session','rt'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward delivery (s)',...
    'ylabel','Valid reward # (sorted by reaction time)',...
    'savepath',panel_path);

%% reward collection-aligned licks

% rasters (sorted chronologically)
plotlickrasters(data(valid_flags,:),meta,...
    'alignment','collection',...
    'sorting',{'session'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'ylabel','Valid reward # (sorted chronologically)',...
    'savepath',panel_path);

% rasters (sorted by reaction time)
plotlickrasters(data(valid_flags,:),meta,...
    'alignment','collection',...
    'sorting',{'session','rt'},...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'ylabel','Valid reward # (sorted by reaction time)',...
    'savepath',panel_path);

%% session averages
plotlickaverages(data,meta,...
    'alignment','collection',...
    'xlim',[-1,1]*3,...
    'xlabel','Time since reward collection (s)',...
    'savepath',panel_path);